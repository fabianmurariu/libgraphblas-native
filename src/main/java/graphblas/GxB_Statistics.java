package graphblas;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/include/GraphBLAS.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class GxB_Statistics extends Structure {
	/** # of objects malloc'ed but not yet freed */
	public long nmalloc;
	public long getNmalloc() {
		return nmalloc;
	}
	public void setNmalloc(long nmalloc) {
		this.nmalloc = nmalloc;
	}
	/** memory in use (in bytes) */
	public long inuse;
	public long getInuse() {
		return inuse;
	}
	public void setInuse(long inuse) {
		this.inuse = inuse;
	}
	/** max memory used since last call to GxB_stats */
	public long maxused;
	public long getMaxused() {
		return maxused;
	}
	public void setMaxused(long maxused) {
		this.maxused = maxused;
	}
	/**
	 * not used, reserved for future use<br>
	 * C type : int64_t[20]
	 */
	public long[] future = new long[20];
	public long[] getFuture() {
		return future;
	}
	public void setFuture(long future[]) {
		this.future = future;
	}
	/**
	 * not used, reserved for future use<br>
	 * C type : double[20]
	 */
	public double[] xfuture = new double[20];
	public double[] getXfuture() {
		return xfuture;
	}
	public void setXfuture(double xfuture[]) {
		this.xfuture = xfuture;
	}
	public GxB_Statistics() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nmalloc", "inuse", "maxused", "future", "xfuture");
	}
	/**
	 * @param nmalloc # of objects malloc'ed but not yet freed<br>
	 * @param inuse memory in use (in bytes)<br>
	 * @param maxused max memory used since last call to GxB_stats<br>
	 * @param future not used, reserved for future use<br>
	 * C type : int64_t[20]<br>
	 * @param xfuture not used, reserved for future use<br>
	 * C type : double[20]
	 */
	public GxB_Statistics(long nmalloc, long inuse, long maxused, long future[], double xfuture[]) {
		super();
		this.nmalloc = nmalloc;
		this.inuse = inuse;
		this.maxused = maxused;
		if ((future.length != this.future.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.future = future;
		if ((xfuture.length != this.xfuture.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.xfuture = xfuture;
	}
	public GxB_Statistics(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends GxB_Statistics implements Structure.ByReference {
		
	};
	public static class ByValue extends GxB_Statistics implements Structure.ByValue {
		
	};
}
