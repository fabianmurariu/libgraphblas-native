package graphblas;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.*;

import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.ShortBuffer;
/**
 * JNA Wrapper for library <b>GraphBLAS</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface GraphBLASLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "libgraphblas";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(GraphBLASLibrary.JNA_LIBRARY_NAME);
	public static final GraphBLASLibrary INSTANCE = (GraphBLASLibrary)Native.loadLibrary(GraphBLASLibrary.JNA_LIBRARY_NAME, GraphBLASLibrary.class);
	public static final int FP_NAN = 0;
	public static final int FP_INFINITE = 1;
	public static final int FP_ZERO = 2;
	public static final int FP_SUBNORMAL = 3;
	public static final int FP_NORMAL = 4;
	/**
	 * <i>native declaration : /usr/include/GraphBLAS.h</i><br>
	 * enum values
	 */
	GrB_Type GrB_BOOL = new GrB_Type(JNA_NATIVE_LIB.getGlobalVariableAddress("GrB_BOOL").getPointer(0));
	GrB_Type GrB_INT8 = new GrB_Type(JNA_NATIVE_LIB.getGlobalVariableAddress("GrB_INT8").getPointer(0));

	public static interface GrB_Info {
		/** <i>native declaration : /usr/include/GraphBLAS.h:79</i> */
		public static final int GrB_SUCCESS = 0;
		/** <i>native declaration : /usr/include/GraphBLAS.h:102</i> */
		public static final int GrB_NO_VALUE = 1;
		/** <i>native declaration : /usr/include/GraphBLAS.h:110</i> */
		public static final int GrB_UNINITIALIZED_OBJECT = 2;
		/** <i>native declaration : /usr/include/GraphBLAS.h:111</i> */
		public static final int GrB_INVALID_OBJECT = 3;
		/** <i>native declaration : /usr/include/GraphBLAS.h:112</i> */
		public static final int GrB_NULL_POINTER = 4;
		/** <i>native declaration : /usr/include/GraphBLAS.h:113</i> */
		public static final int GrB_INVALID_VALUE = 5;
		/** <i>native declaration : /usr/include/GraphBLAS.h:114</i> */
		public static final int GrB_INVALID_INDEX = 6;
		/** <i>native declaration : /usr/include/GraphBLAS.h:117</i> */
		public static final int GrB_DOMAIN_MISMATCH = 7;
		/** <i>native declaration : /usr/include/GraphBLAS.h:118</i> */
		public static final int GrB_DIMENSION_MISMATCH = 8;
		/** <i>native declaration : /usr/include/GraphBLAS.h:119</i> */
		public static final int GrB_OUTPUT_NOT_EMPTY = 9;
		/** <i>native declaration : /usr/include/GraphBLAS.h:127</i> */
		public static final int GrB_OUT_OF_MEMORY = 10;
		/** <i>native declaration : /usr/include/GraphBLAS.h:128</i> */
		public static final int GrB_INSUFFICIENT_SPACE = 11;
		/** <i>native declaration : /usr/include/GraphBLAS.h:129</i> */
		public static final int GrB_INDEX_OUT_OF_BOUNDS = 12;
		/**
		 * SuiteSparse:GraphBLAS never panics<br>
		 * <i>native declaration : /usr/include/GraphBLAS.h:131</i>
		 */
		public static final int GrB_PANIC = 13;
	};
	/**
	 * <i>native declaration : /usr/include/GraphBLAS.h</i><br>
	 * enum values
	 */
	public static interface GrB_Mode {
		/** <i>native declaration : /usr/include/GraphBLAS.h:176</i> */
		public static final int GrB_NONBLOCKING = 0;
		/**
		 * no computations are ever left pending<br>
		 * <i>native declaration : /usr/include/GraphBLAS.h:177</i>
		 */
		public static final int GrB_BLOCKING = 1;
	};
	/**
	 * <i>native declaration : /usr/include/GraphBLAS.h</i><br>
	 * enum values
	 */
	public static interface GrB_Desc_Field {
		/** <i>native declaration : /usr/include/GraphBLAS.h:2410</i> */
		public static final int GrB_OUTP = 0;
		/** <i>native declaration : /usr/include/GraphBLAS.h:2411</i> */
		public static final int GrB_MASK = 1;
		/** <i>native declaration : /usr/include/GraphBLAS.h:2412</i> */
		public static final int GrB_INP0 = 2;
		/**
		 * descriptor for the second input of a method<br>
		 * <i>native declaration : /usr/include/GraphBLAS.h:2413</i>
		 */
		public static final int GrB_INP1 = 3;
	};
	/**
	 * <i>native declaration : /usr/include/GraphBLAS.h</i><br>
	 * enum values
	 */
	public static interface GrB_Desc_Value {
		/** <i>native declaration : /usr/include/GraphBLAS.h:2421</i> */
		public static final int GxB_DEFAULT = 0;
		/** <i>native declaration : /usr/include/GraphBLAS.h:2422</i> */
		public static final int GrB_REPLACE = 1;
		/** <i>native declaration : /usr/include/GraphBLAS.h:2423</i> */
		public static final int GrB_SCMP = 2;
		/**
		 * use the transpose of the input<br>
		 * <i>native declaration : /usr/include/GraphBLAS.h:2424</i>
		 */
		public static final int GrB_TRAN = 3;
	};
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final String GXB_DATE = (String)"July 4, 2018";
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final int GXB_IMPLEMENTATION_MAJOR = (int)2;
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final int GXB_IMPLEMENTATION_MINOR = (int)0;
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final int GXB_IMPLEMENTATION_SUB = (int)3;
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final long GXB_IMPLEMENTATION = (long)(((2) * 1000L + (0)) * 1000L + (3));
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final String GXB_ABOUT = (String)"SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2018, ";
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final String GXB_LICENSE = (String)"SuiteSparse:GraphBLAS, Copyright 2017-2018, Timothy A. Davis\n";
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final String GXB_SPEC_DATE = (String)"Nov 14, 2017";
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final int GXB_MAJOR = (int)1;
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final int GXB_MINOR = (int)1;
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final int GXB_SUB = (int)0;
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final long GXB = (long)(((1) * 1000L + (1)) * 1000L + (0));
	/** <i>native declaration : /usr/include/GraphBLAS.h</i> */
	public static final String GXB_SPEC = (String)"GraphBLAS C API, provisional release, by Aydin Buluc, Timothy\n";
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int _STDIO_H = (int)1;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int _IOFBF = (int)0;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int _IOLBF = (int)1;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int _IONBF = (int)2;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int BUFSIZ = (int)8192;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int EOF = (int)(-1);
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int SEEK_SET = (int)0;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int SEEK_CUR = (int)1;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int SEEK_END = (int)2;
	/** <i>native declaration : /usr/include/string.h</i> */
	public static final int _STRING_H = (int)1;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int _STDLIB_H = (int)1;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int __ldiv_t_defined = (int)1;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int RAND_MAX = (int)2147483647;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int EXIT_FAILURE = (int)1;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int EXIT_SUCCESS = (int)0;
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int _STDINT_H = (int)1;
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT8_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT16_MIN = (int)(-32767 - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT32_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT64_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT8_MAX = (int)(127);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT16_MAX = (int)(32767);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT32_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT64_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT8_MAX = (int)(255);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT16_MAX = (int)(65535);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINT32_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINT64_MAX = (long)(-1L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST8_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST16_MIN = (int)(-32767 - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST32_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_LEAST64_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST8_MAX = (int)(127);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST16_MAX = (int)(32767);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST32_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_LEAST64_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT_LEAST8_MAX = (int)(255);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT_LEAST16_MAX = (int)(65535);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINT_LEAST32_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINT_LEAST64_MAX = (long)(-1L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_FAST8_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_FAST16_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_FAST32_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_FAST64_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_FAST8_MAX = (int)(127);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_FAST16_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_FAST32_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_FAST64_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT_FAST8_MAX = (int)(255);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINT_FAST16_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINT_FAST32_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINT_FAST64_MAX = (long)(-1L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INTPTR_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INTPTR_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINTPTR_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INTMAX_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INTMAX_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINTMAX_MAX = (long)(-1L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int PTRDIFF_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int PTRDIFF_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int SIG_ATOMIC_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int SIG_ATOMIC_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long SIZE_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int WINT_MIN = (int)(0);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long WINT_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final int _INTTYPES_H = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _FEATURES_H = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _DEFAULT_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX_IMPLICITLY = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_C_SOURCE = (int)200809;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX2 = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199309 = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199506 = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC95 = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC99 = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K8 = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _ATFILE_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_MISC = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ATFILE = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_FORTIFY_LEVEL = (int)0;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC_USE_DEPRECATED_GETS = (int)1;
	/** <i>native declaration : /usr/include/stdc-predef.h</i> */
	public static final int _STDC_PREDEF_H = (int)1;
	/** <i>native declaration : /usr/include/stdc-predef.h</i> */
	public static final int __STDC_IEC_559__ = (int)1;
	/** <i>native declaration : /usr/include/stdc-predef.h</i> */
	public static final int __STDC_IEC_559_COMPLEX__ = (int)1;
	/** <i>native declaration : /usr/include/stdc-predef.h</i> */
	public static final int __STDC_ISO_10646__ = (int)201706;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GNU_LIBRARY__ = (int)6;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC__ = (int)2;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC_MINOR__ = (int)28;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final int ____gwchar_t_defined = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String __PRI64_PREFIX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRId8 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRId16 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRId32 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRId64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdLEAST8 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdLEAST16 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdLEAST32 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdFAST8 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdFAST16 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdFAST32 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIi8 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIi16 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIi32 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIi64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiLEAST8 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiLEAST16 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiLEAST32 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiFAST8 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiFAST16 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiFAST32 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIo8 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIo16 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIo32 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIo64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoLEAST8 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoLEAST16 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoLEAST32 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoFAST8 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoFAST16 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoFAST32 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIu8 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIu16 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIu32 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIu64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuLEAST8 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuLEAST16 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuLEAST32 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuFAST8 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuFAST16 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuFAST32 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIx8 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIx16 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIx32 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIx64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxLEAST8 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxLEAST16 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxLEAST32 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxFAST8 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxFAST16 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxFAST32 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIX8 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIX16 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIX32 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIX64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXLEAST8 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXLEAST16 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXLEAST32 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXFAST8 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXFAST16 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXFAST32 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdPTR = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiPTR = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoPTR = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuPTR = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxPTR = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXPTR = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNd8 = (String)"hhd";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNd16 = (String)"hd";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNd32 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNd64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdLEAST8 = (String)"hhd";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdLEAST16 = (String)"hd";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdLEAST32 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdFAST8 = (String)"hhd";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdFAST16 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdFAST32 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNi8 = (String)"hhi";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNi16 = (String)"hi";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNi32 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNi64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiLEAST8 = (String)"hhi";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiLEAST16 = (String)"hi";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiLEAST32 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiFAST8 = (String)"hhi";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiFAST16 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiFAST32 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNu8 = (String)"hhu";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNu16 = (String)"hu";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNu32 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNu64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuLEAST8 = (String)"hhu";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuLEAST16 = (String)"hu";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuLEAST32 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuFAST8 = (String)"hhu";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuFAST16 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuFAST32 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNo8 = (String)"hho";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNo16 = (String)"ho";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNo32 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNo64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoLEAST8 = (String)"hho";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoLEAST16 = (String)"ho";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoLEAST32 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoFAST8 = (String)"hho";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoFAST16 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoFAST32 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNx8 = (String)"hhx";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNx16 = (String)"hx";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNx32 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNx64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxLEAST8 = (String)"hhx";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxLEAST16 = (String)"hx";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxLEAST32 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxLEAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxFAST8 = (String)"hhx";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxFAST16 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxFAST32 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxFAST64 = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxMAX = (String)"ll";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdPTR = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiPTR = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoPTR = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuPTR = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxPTR = (String)"x";
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int _LIBC_LIMITS_H_ = (int)1;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int MB_LEN_MAX = (int)16;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int _LIMITS_H = (int)1;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int CHAR_BIT = (int)8;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int SCHAR_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int SCHAR_MAX = (int)127;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int UCHAR_MAX = (int)255;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int CHAR_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int CHAR_MAX = (int)127;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int SHRT_MIN = (int)(-32768);
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int SHRT_MAX = (int)32767;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int USHRT_MAX = (int)65535;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int INT_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int INT_MAX = (int)2147483647;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long UINT_MAX = (long)4294967295L;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int LONG_MAX = (int)2147483647;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int LONG_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long ULONG_MAX = (long)4294967295L;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long LLONG_MAX = (long)9223372036854775807L;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long LLONG_MIN = (long)(-9223372036854775807L - 1L);
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long ULLONG_MAX = (long)-1L;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final int _MATH_H = (int)1;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double HUGE_VAL = (double)Double.MAX_VALUE;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final float HUGE_VALF = (float)Float.MAX_VALUE;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double HUGE_VALL = (double)Double.MAX_VALUE;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final float INFINITY = (float)Float.MAX_VALUE;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final float NAN = (float)(0.0f / 0.0f);
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final int FP_ILOGB0 = (int)(-2147483647);
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final int FP_ILOGBNAN = (int)2147483647;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final int __MATH_DECLARE_LDOUBLE = (int)1;
	/**
	 * define<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/math.h</i><br>
	 * 0
	 */
	/**
	 * define<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/math.h</i><br>
	 * 1
	 */
	/**
	 * define<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/math.h</i><br>
	 * 2
	 */
	/**
	 * define<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/math.h</i><br>
	 * 3
	 */
	/**
	 * define<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/math.h</i><br>
	 * 4
	 */
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final int MATH_ERRNO = (int)1;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final int MATH_ERREXCEPT = (int)2;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final int math_errhandling = (int)(1 | 2);
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_E = (double)2.7182818284590452354;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_LOG2E = (double)1.4426950408889634074;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_LOG10E = (double)0.43429448190325182765;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_LN2 = (double)0.69314718055994530942;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_LN10 = (double)2.30258509299404568402;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_PI = (double)3.14159265358979323846;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_PI_2 = (double)1.57079632679489661923;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_PI_4 = (double)0.78539816339744830962;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_1_PI = (double)0.31830988618379067154;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_2_PI = (double)0.63661977236758134308;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_2_SQRTPI = (double)1.12837916709551257390;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_SQRT2 = (double)1.41421356237309504880;
	/** <i>native declaration : /usr/include/math.h</i> */
	public static final double M_SQRT1_2 = (double)0.70710678118654752440;

	/**
	 * Slow-path routines used by the optimized inline functions in<br>
	 * bits/stdio.h.<br>
	 * Original signature : <code>int __uflow(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:77</i>
	 */
	int __uflow(GraphBLASLibrary.FILE FILEPtr1);
	/**
	 * Original signature : <code>int __overflow(FILE*, int)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:78</i>
	 */
	int __overflow(GraphBLASLibrary.FILE FILEPtr1, int int1);
	/**
	 * start up GraphBLAS<br>
	 * Original signature : <code>GrB_Info GrB_init(const GrB_Mode)</code><br>
	 * @param mode blocking or non-blocking mode<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:181</i>
	 */
	int GrB_init(int mode);
	/**
	 * results are required.  GrB_wait ensures all pending operations are finished.<br>
	 * finish all pending computations<br>
	 * Original signature : <code>GrB_Info GrB_wait()</code><br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:189</i>
	 */
	int GrB_wait();
	/**
	 * GrB_finalize does not call GrB_wait; any pending computations are abandoned.<br>
	 * finish GraphBLAS<br>
	 * Original signature : <code>GrB_Info GrB_finalize()</code><br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:193</i>
	 */
	int GrB_finalize();
	/**
	 * allocated in thread local storage and must not be free'd.<br>
	 * return a string describing the last error<br>
	 * Original signature : <code>char* GrB_error()</code><br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:204</i>
	 */
	String GrB_error();
	/**
	 * #define NMACRO<br>
	 * create a new GraphBLAS type<br>
	 * Original signature : <code>GrB_Info GrB_Type_new(GrB_Type*, size_t)</code><br>
	 * @param type handle of user type to create<br>
	 * @param sizeof_ctype size = sizeof (ctype) of the C type<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:257</i><br>
	 * @deprecated use the safer method {@link #GrB_Type_new(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int GrB_Type_new(Pointer type, NativeSize sizeof_ctype);
	/**
	 * #define NMACRO<br>
	 * create a new GraphBLAS type<br>
	 * Original signature : <code>GrB_Info GrB_Type_new(GrB_Type*, size_t)</code><br>
	 * @param type handle of user type to create<br>
	 * @param sizeof_ctype size = sizeof (ctype) of the C type<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:257</i>
	 */
	int GrB_Type_new(PointerByReference type, NativeSize sizeof_ctype);
	/**
	 * to be added to the new type.<br>
	 * not user-callable; use GrB_Type_new instead<br>
	 * Original signature : <code>GrB_Info GB_Type_new(GrB_Type*, const size_t, const char*)</code><br>
	 * @param type handle of user type to create<br>
	 * @param sizeof_ctype size of the user type<br>
	 * @param name name of the type, as "sizeof (ctype)"<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:275</i><br>
	 * @deprecated use the safer methods {@link #GB_Type_new(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, java.lang.String)} and {@link #GB_Type_new(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GB_Type_new(Pointer type, NativeSize sizeof_ctype, Pointer name);
	/**
	 * to be added to the new type.<br>
	 * not user-callable; use GrB_Type_new instead<br>
	 * Original signature : <code>GrB_Info GB_Type_new(GrB_Type*, const size_t, const char*)</code><br>
	 * @param type handle of user type to create<br>
	 * @param sizeof_ctype size of the user type<br>
	 * @param name name of the type, as "sizeof (ctype)"<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:275</i>
	 */
	int GB_Type_new(PointerByReference type, NativeSize sizeof_ctype, String name);
	/**
	 * to be added to the new type.<br>
	 * not user-callable; use GrB_Type_new instead<br>
	 * Original signature : <code>GrB_Info GB_Type_new(GrB_Type*, const size_t, const char*)</code><br>
	 * @param type handle of user type to create<br>
	 * @param sizeof_ctype size of the user type<br>
	 * @param name name of the type, as "sizeof (ctype)"<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:275</i>
	 */
	int GB_Type_new(PointerByReference type, NativeSize sizeof_ctype, Pointer name);
	/**
	 * SPEC: GxB_Type_size is an extension to the spec<br>
	 * determine the size of the type<br>
	 * Original signature : <code>GrB_Info GxB_Type_size(size_t*, GrB_Type)</code><br>
	 * @param size the sizeof the type<br>
	 * @param type type to determine the sizeof<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:284</i><br>
	 * @deprecated use the safer methods {@link #GxB_Type_size(com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, graphblas.GraphBLASLibrary.GrB_Type)} and {@link #GxB_Type_size(com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Type_size(NativeSizeByReference size, Pointer type);
	/**
	 * SPEC: GxB_Type_size is an extension to the spec<br>
	 * determine the size of the type<br>
	 * Original signature : <code>GrB_Info GxB_Type_size(size_t*, GrB_Type)</code><br>
	 * @param size the sizeof the type<br>
	 * @param type type to determine the sizeof<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:284</i>
	 */
	int GxB_Type_size(NativeSizeByReference size, GraphBLASLibrary.GrB_Type type);
	/**
	 * free a user-defined type<br>
	 * Original signature : <code>GrB_Info GrB_Type_free(GrB_Type*)</code><br>
	 * @param type handle of user-defined type to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:290</i><br>
	 * @deprecated use the safer method {@link #GrB_Type_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GrB_Type_free(Pointer type);
	/**
	 * free a user-defined type<br>
	 * Original signature : <code>GrB_Info GrB_Type_free(GrB_Type*)</code><br>
	 * @param type handle of user-defined type to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:290</i>
	 */
	int GrB_Type_free(PointerByReference type);
	/**
	 * discussion of GrB_Type_new above.<br>
	 * create a new user-defined unary operator<br>
	 * Original signature : <code>GrB_Info GrB_UnaryOp_new(GrB_UnaryOp*, void*, const GrB_Type, const GrB_Type)</code><br>
	 * @param unaryop handle for the new unary operator<br>
	 * @param function pointer to the unary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:382</i><br>
	 * @deprecated use the safer methods {@link #GrB_UnaryOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Type, graphblas.GraphBLASLibrary.GrB_Type)} and {@link #GrB_UnaryOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_UnaryOp_new(Pointer unaryop, Pointer function, Pointer ztype, Pointer xtype);
	/**
	 * discussion of GrB_Type_new above.<br>
	 * create a new user-defined unary operator<br>
	 * Original signature : <code>GrB_Info GrB_UnaryOp_new(GrB_UnaryOp*, void*, const GrB_Type, const GrB_Type)</code><br>
	 * @param unaryop handle for the new unary operator<br>
	 * @param function pointer to the unary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:382</i>
	 */
	int GrB_UnaryOp_new(PointerByReference unaryop, Pointer function, GraphBLASLibrary.GrB_Type ztype, GraphBLASLibrary.GrB_Type xtype);
	/**
	 * discussion of GrB_Type_new above.<br>
	 * create a new user-defined unary operator<br>
	 * Original signature : <code>GrB_Info GrB_UnaryOp_new(GrB_UnaryOp*, void*, const GrB_Type, const GrB_Type)</code><br>
	 * @param unaryop handle for the new unary operator<br>
	 * @param function pointer to the unary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:382</i>
	 */
	int GrB_UnaryOp_new(PointerByReference unaryop, Pointer function, Pointer ztype, Pointer xtype);
	/**
	 * not user-callable; use GrB_UnaryOp_new<br>
	 * Original signature : <code>GrB_Info GB_UnaryOp_new(GrB_UnaryOp*, void*, const GrB_Type, const GrB_Type, const char*)</code><br>
	 * @param unaryop handle for the new unary operator<br>
	 * @param function pointer to the unary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * @param name name of the underlying function<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:394</i><br>
	 * @deprecated use the safer methods {@link #GB_UnaryOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Type, graphblas.GraphBLASLibrary.GrB_Type, java.lang.String)} and {@link #GB_UnaryOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GB_UnaryOp_new(Pointer unaryop, Pointer function, Pointer ztype, Pointer xtype, Pointer name);
	/**
	 * not user-callable; use GrB_UnaryOp_new<br>
	 * Original signature : <code>GrB_Info GB_UnaryOp_new(GrB_UnaryOp*, void*, const GrB_Type, const GrB_Type, const char*)</code><br>
	 * @param unaryop handle for the new unary operator<br>
	 * @param function pointer to the unary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * @param name name of the underlying function<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:394</i>
	 */
	int GB_UnaryOp_new(PointerByReference unaryop, Pointer function, GraphBLASLibrary.GrB_Type ztype, GraphBLASLibrary.GrB_Type xtype, String name);
	/**
	 * not user-callable; use GrB_UnaryOp_new<br>
	 * Original signature : <code>GrB_Info GB_UnaryOp_new(GrB_UnaryOp*, void*, const GrB_Type, const GrB_Type, const char*)</code><br>
	 * @param unaryop handle for the new unary operator<br>
	 * @param function pointer to the unary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * @param name name of the underlying function<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:394</i>
	 */
	int GB_UnaryOp_new(PointerByReference unaryop, Pointer function, Pointer ztype, Pointer xtype, Pointer name);
	/**
	 * SPEC: GxB_UnaryOp_ztype is an extension to the spec<br>
	 * return the type of z<br>
	 * Original signature : <code>GrB_Info GxB_UnaryOp_ztype(GrB_Type*, const GrB_UnaryOp)</code><br>
	 * @param ztype return type of output z<br>
	 * @param unaryop unary operator<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:405</i><br>
	 * @deprecated use the safer methods {@link #GxB_UnaryOp_ztype(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_UnaryOp)} and {@link #GxB_UnaryOp_ztype(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_UnaryOp_ztype(Pointer ztype, Pointer unaryop);
	/**
	 * SPEC: GxB_UnaryOp_ztype is an extension to the spec<br>
	 * return the type of z<br>
	 * Original signature : <code>GrB_Info GxB_UnaryOp_ztype(GrB_Type*, const GrB_UnaryOp)</code><br>
	 * @param ztype return type of output z<br>
	 * @param unaryop unary operator<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:405</i>
	 */
	int GxB_UnaryOp_ztype(PointerByReference ztype, GraphBLASLibrary.GrB_UnaryOp unaryop);
	/**
	 * SPEC: GxB_UnaryOp_ztype is an extension to the spec<br>
	 * return the type of z<br>
	 * Original signature : <code>GrB_Info GxB_UnaryOp_ztype(GrB_Type*, const GrB_UnaryOp)</code><br>
	 * @param ztype return type of output z<br>
	 * @param unaryop unary operator<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:405</i>
	 */
	int GxB_UnaryOp_ztype(PointerByReference ztype, Pointer unaryop);
	/**
	 * SPEC: GxB_UnaryOp_xtype is an extension to the spec<br>
	 * return the type of x<br>
	 * Original signature : <code>GrB_Info GxB_UnaryOp_xtype(GrB_Type*, const GrB_UnaryOp)</code><br>
	 * @param xtype return type of input x<br>
	 * @param unaryop unary operator<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:413</i><br>
	 * @deprecated use the safer methods {@link #GxB_UnaryOp_xtype(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_UnaryOp)} and {@link #GxB_UnaryOp_xtype(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_UnaryOp_xtype(Pointer xtype, Pointer unaryop);
	/**
	 * SPEC: GxB_UnaryOp_xtype is an extension to the spec<br>
	 * return the type of x<br>
	 * Original signature : <code>GrB_Info GxB_UnaryOp_xtype(GrB_Type*, const GrB_UnaryOp)</code><br>
	 * @param xtype return type of input x<br>
	 * @param unaryop unary operator<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:413</i>
	 */
	int GxB_UnaryOp_xtype(PointerByReference xtype, GraphBLASLibrary.GrB_UnaryOp unaryop);
	/**
	 * SPEC: GxB_UnaryOp_xtype is an extension to the spec<br>
	 * return the type of x<br>
	 * Original signature : <code>GrB_Info GxB_UnaryOp_xtype(GrB_Type*, const GrB_UnaryOp)</code><br>
	 * @param xtype return type of input x<br>
	 * @param unaryop unary operator<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:413</i>
	 */
	int GxB_UnaryOp_xtype(PointerByReference xtype, Pointer unaryop);
	/**
	 * free a user-created unary operator<br>
	 * Original signature : <code>GrB_Info GrB_UnaryOp_free(GrB_UnaryOp*)</code><br>
	 * @param unaryop handle of unary operator to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:419</i><br>
	 * @deprecated use the safer method {@link #GrB_UnaryOp_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GrB_UnaryOp_free(Pointer unaryop);
	/**
	 * free a user-created unary operator<br>
	 * Original signature : <code>GrB_Info GrB_UnaryOp_free(GrB_UnaryOp*)</code><br>
	 * @param unaryop handle of unary operator to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:419</i>
	 */
	int GrB_UnaryOp_free(PointerByReference unaryop);
	/**
	 * discussion of GrB_Type_new above.<br>
	 * Original signature : <code>GrB_Info GrB_BinaryOp_new(GrB_BinaryOp*, void*, const GrB_Type, const GrB_Type, const GrB_Type)</code><br>
	 * @param binaryop handle for the new binary operator<br>
	 * @param function pointer to the binary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * @param ytype type of input y<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:664</i><br>
	 * @deprecated use the safer methods {@link #GrB_BinaryOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Type, graphblas.GraphBLASLibrary.GrB_Type, graphblas.GraphBLASLibrary.GrB_Type)} and {@link #GrB_BinaryOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_BinaryOp_new(Pointer binaryop, Pointer function, Pointer ztype, Pointer xtype, Pointer ytype);
	/**
	 * discussion of GrB_Type_new above.<br>
	 * Original signature : <code>GrB_Info GrB_BinaryOp_new(GrB_BinaryOp*, void*, const GrB_Type, const GrB_Type, const GrB_Type)</code><br>
	 * @param binaryop handle for the new binary operator<br>
	 * @param function pointer to the binary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * @param ytype type of input y<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:664</i>
	 */
	int GrB_BinaryOp_new(PointerByReference binaryop, Pointer function, GraphBLASLibrary.GrB_Type ztype, GraphBLASLibrary.GrB_Type xtype, GraphBLASLibrary.GrB_Type ytype);
	/**
	 * discussion of GrB_Type_new above.<br>
	 * Original signature : <code>GrB_Info GrB_BinaryOp_new(GrB_BinaryOp*, void*, const GrB_Type, const GrB_Type, const GrB_Type)</code><br>
	 * @param binaryop handle for the new binary operator<br>
	 * @param function pointer to the binary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * @param ytype type of input y<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:664</i>
	 */
	int GrB_BinaryOp_new(PointerByReference binaryop, Pointer function, Pointer ztype, Pointer xtype, Pointer ytype);
	/**
	 * not user-callable; use GrB_BinaryOp_new<br>
	 * Original signature : <code>GrB_Info GB_BinaryOp_new(GrB_BinaryOp*, void*, const GrB_Type, const GrB_Type, const GrB_Type, const char*)</code><br>
	 * @param binaryop handle for the new binary operator<br>
	 * @param function pointer to the binary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * @param ytype type of input y<br>
	 * @param name name of the underlying function<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:677</i><br>
	 * @deprecated use the safer methods {@link #GB_BinaryOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Type, graphblas.GraphBLASLibrary.GrB_Type, graphblas.GraphBLASLibrary.GrB_Type, java.lang.String)} and {@link #GB_BinaryOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GB_BinaryOp_new(Pointer binaryop, Pointer function, Pointer ztype, Pointer xtype, Pointer ytype, Pointer name);
	/**
	 * not user-callable; use GrB_BinaryOp_new<br>
	 * Original signature : <code>GrB_Info GB_BinaryOp_new(GrB_BinaryOp*, void*, const GrB_Type, const GrB_Type, const GrB_Type, const char*)</code><br>
	 * @param binaryop handle for the new binary operator<br>
	 * @param function pointer to the binary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * @param ytype type of input y<br>
	 * @param name name of the underlying function<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:677</i>
	 */
	int GB_BinaryOp_new(PointerByReference binaryop, Pointer function, GraphBLASLibrary.GrB_Type ztype, GraphBLASLibrary.GrB_Type xtype, GraphBLASLibrary.GrB_Type ytype, String name);
	/**
	 * not user-callable; use GrB_BinaryOp_new<br>
	 * Original signature : <code>GrB_Info GB_BinaryOp_new(GrB_BinaryOp*, void*, const GrB_Type, const GrB_Type, const GrB_Type, const char*)</code><br>
	 * @param binaryop handle for the new binary operator<br>
	 * @param function pointer to the binary function<br>
	 * @param ztype type of output z<br>
	 * @param xtype type of input x<br>
	 * @param ytype type of input y<br>
	 * @param name name of the underlying function<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:677</i>
	 */
	int GB_BinaryOp_new(PointerByReference binaryop, Pointer function, Pointer ztype, Pointer xtype, Pointer ytype, Pointer name);
	/**
	 * SPEC: GxB_BinaryOp_ztype is an extension to the spec<br>
	 * return the type of z<br>
	 * Original signature : <code>GrB_Info GxB_BinaryOp_ztype(GrB_Type*, const GrB_BinaryOp)</code><br>
	 * @param ztype return type of output z<br>
	 * @param binaryop binary operator to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:689</i><br>
	 * @deprecated use the safer methods {@link #GxB_BinaryOp_ztype(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GxB_BinaryOp_ztype(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_BinaryOp_ztype(Pointer ztype, Pointer binaryop);
	/**
	 * SPEC: GxB_BinaryOp_ztype is an extension to the spec<br>
	 * return the type of z<br>
	 * Original signature : <code>GrB_Info GxB_BinaryOp_ztype(GrB_Type*, const GrB_BinaryOp)</code><br>
	 * @param ztype return type of output z<br>
	 * @param binaryop binary operator to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:689</i>
	 */
	int GxB_BinaryOp_ztype(PointerByReference ztype, GraphBLASLibrary.GrB_BinaryOp binaryop);
	/**
	 * SPEC: GxB_BinaryOp_ztype is an extension to the spec<br>
	 * return the type of z<br>
	 * Original signature : <code>GrB_Info GxB_BinaryOp_ztype(GrB_Type*, const GrB_BinaryOp)</code><br>
	 * @param ztype return type of output z<br>
	 * @param binaryop binary operator to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:689</i>
	 */
	int GxB_BinaryOp_ztype(PointerByReference ztype, Pointer binaryop);
	/**
	 * SPEC: GxB_BinaryOp_xtype is an extension to the spec<br>
	 * return the type of x<br>
	 * Original signature : <code>GrB_Info GxB_BinaryOp_xtype(GrB_Type*, const GrB_BinaryOp)</code><br>
	 * @param xtype return type of input x<br>
	 * @param binaryop binary operator to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:697</i><br>
	 * @deprecated use the safer methods {@link #GxB_BinaryOp_xtype(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GxB_BinaryOp_xtype(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_BinaryOp_xtype(Pointer xtype, Pointer binaryop);
	/**
	 * SPEC: GxB_BinaryOp_xtype is an extension to the spec<br>
	 * return the type of x<br>
	 * Original signature : <code>GrB_Info GxB_BinaryOp_xtype(GrB_Type*, const GrB_BinaryOp)</code><br>
	 * @param xtype return type of input x<br>
	 * @param binaryop binary operator to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:697</i>
	 */
	int GxB_BinaryOp_xtype(PointerByReference xtype, GraphBLASLibrary.GrB_BinaryOp binaryop);
	/**
	 * SPEC: GxB_BinaryOp_xtype is an extension to the spec<br>
	 * return the type of x<br>
	 * Original signature : <code>GrB_Info GxB_BinaryOp_xtype(GrB_Type*, const GrB_BinaryOp)</code><br>
	 * @param xtype return type of input x<br>
	 * @param binaryop binary operator to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:697</i>
	 */
	int GxB_BinaryOp_xtype(PointerByReference xtype, Pointer binaryop);
	/**
	 * SPEC: GxB_BinaryOp_ytype is an extension to the spec<br>
	 * return the type of y<br>
	 * Original signature : <code>GrB_Info GxB_BinaryOp_ytype(GrB_Type*, const GrB_BinaryOp)</code><br>
	 * @param ytype return type of input y<br>
	 * @param binaryop binary operator to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:705</i><br>
	 * @deprecated use the safer methods {@link #GxB_BinaryOp_ytype(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GxB_BinaryOp_ytype(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_BinaryOp_ytype(Pointer ytype, Pointer binaryop);
	/**
	 * SPEC: GxB_BinaryOp_ytype is an extension to the spec<br>
	 * return the type of y<br>
	 * Original signature : <code>GrB_Info GxB_BinaryOp_ytype(GrB_Type*, const GrB_BinaryOp)</code><br>
	 * @param ytype return type of input y<br>
	 * @param binaryop binary operator to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:705</i>
	 */
	int GxB_BinaryOp_ytype(PointerByReference ytype, GraphBLASLibrary.GrB_BinaryOp binaryop);
	/**
	 * SPEC: GxB_BinaryOp_ytype is an extension to the spec<br>
	 * return the type of y<br>
	 * Original signature : <code>GrB_Info GxB_BinaryOp_ytype(GrB_Type*, const GrB_BinaryOp)</code><br>
	 * @param ytype return type of input y<br>
	 * @param binaryop binary operator to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:705</i>
	 */
	int GxB_BinaryOp_ytype(PointerByReference ytype, Pointer binaryop);
	/**
	 * free a user-created binary operator<br>
	 * Original signature : <code>GrB_Info GrB_BinaryOp_free(GrB_BinaryOp*)</code><br>
	 * @param binaryop handle of binary operator to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:711</i><br>
	 * @deprecated use the safer method {@link #GrB_BinaryOp_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GrB_BinaryOp_free(Pointer binaryop);
	/**
	 * free a user-created binary operator<br>
	 * Original signature : <code>GrB_Info GrB_BinaryOp_free(GrB_BinaryOp*)</code><br>
	 * @param binaryop handle of binary operator to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:711</i>
	 */
	int GrB_BinaryOp_free(PointerByReference binaryop);
	/**
	 * discussion of GrB_Type_new above.<br>
	 * create a new user-defined select operator<br>
	 * Original signature : <code>GrB_Info GxB_SelectOp_new(GxB_SelectOp*, void*, const GrB_Type)</code><br>
	 * @param selectop handle for the new select operator<br>
	 * @param function pointer to the select function<br>
	 * @param xtype type of input x, or NULL if type-generic<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:780</i><br>
	 * @deprecated use the safer methods {@link #GxB_SelectOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Type)} and {@link #GxB_SelectOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_SelectOp_new(Pointer selectop, Pointer function, Pointer xtype);
	/**
	 * discussion of GrB_Type_new above.<br>
	 * create a new user-defined select operator<br>
	 * Original signature : <code>GrB_Info GxB_SelectOp_new(GxB_SelectOp*, void*, const GrB_Type)</code><br>
	 * @param selectop handle for the new select operator<br>
	 * @param function pointer to the select function<br>
	 * @param xtype type of input x, or NULL if type-generic<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:780</i>
	 */
	int GxB_SelectOp_new(PointerByReference selectop, Pointer function, GraphBLASLibrary.GrB_Type xtype);
	/**
	 * discussion of GrB_Type_new above.<br>
	 * create a new user-defined select operator<br>
	 * Original signature : <code>GrB_Info GxB_SelectOp_new(GxB_SelectOp*, void*, const GrB_Type)</code><br>
	 * @param selectop handle for the new select operator<br>
	 * @param function pointer to the select function<br>
	 * @param xtype type of input x, or NULL if type-generic<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:780</i>
	 */
	int GxB_SelectOp_new(PointerByReference selectop, Pointer function, Pointer xtype);
	/**
	 * not user-callable; use GxB_SelectOp_new<br>
	 * Original signature : <code>GrB_Info GB_SelectOp_new(GxB_SelectOp*, void*, const GrB_Type, const char*)</code><br>
	 * @param selectop handle for the new select operator<br>
	 * @param function pointer to the select function<br>
	 * @param xtype type of input x<br>
	 * @param name name of the underlying function<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:791</i><br>
	 * @deprecated use the safer methods {@link #GB_SelectOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Type, java.lang.String)} and {@link #GB_SelectOp_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GB_SelectOp_new(Pointer selectop, Pointer function, Pointer xtype, Pointer name);
	/**
	 * not user-callable; use GxB_SelectOp_new<br>
	 * Original signature : <code>GrB_Info GB_SelectOp_new(GxB_SelectOp*, void*, const GrB_Type, const char*)</code><br>
	 * @param selectop handle for the new select operator<br>
	 * @param function pointer to the select function<br>
	 * @param xtype type of input x<br>
	 * @param name name of the underlying function<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:791</i>
	 */
	int GB_SelectOp_new(PointerByReference selectop, Pointer function, GraphBLASLibrary.GrB_Type xtype, String name);
	/**
	 * not user-callable; use GxB_SelectOp_new<br>
	 * Original signature : <code>GrB_Info GB_SelectOp_new(GxB_SelectOp*, void*, const GrB_Type, const char*)</code><br>
	 * @param selectop handle for the new select operator<br>
	 * @param function pointer to the select function<br>
	 * @param xtype type of input x<br>
	 * @param name name of the underlying function<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:791</i>
	 */
	int GB_SelectOp_new(PointerByReference selectop, Pointer function, Pointer xtype, Pointer name);
	/**
	 * return the type of x<br>
	 * Original signature : <code>GrB_Info GxB_SelectOp_xtype(GrB_Type*, const GxB_SelectOp)</code><br>
	 * @param xtype return type of input x<br>
	 * @param selectop select operator<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:799</i><br>
	 * @deprecated use the safer methods {@link #GxB_SelectOp_xtype(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GxB_SelectOp)} and {@link #GxB_SelectOp_xtype(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_SelectOp_xtype(Pointer xtype, Pointer selectop);
	/**
	 * return the type of x<br>
	 * Original signature : <code>GrB_Info GxB_SelectOp_xtype(GrB_Type*, const GxB_SelectOp)</code><br>
	 * @param xtype return type of input x<br>
	 * @param selectop select operator<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:799</i>
	 */
	int GxB_SelectOp_xtype(PointerByReference xtype, GraphBLASLibrary.GxB_SelectOp selectop);
	/**
	 * return the type of x<br>
	 * Original signature : <code>GrB_Info GxB_SelectOp_xtype(GrB_Type*, const GxB_SelectOp)</code><br>
	 * @param xtype return type of input x<br>
	 * @param selectop select operator<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:799</i>
	 */
	int GxB_SelectOp_xtype(PointerByReference xtype, Pointer selectop);
	/**
	 * free a user-created select operator<br>
	 * Original signature : <code>GrB_Info GxB_SelectOp_free(GxB_SelectOp*)</code><br>
	 * @param selectop handle of select operator to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:805</i><br>
	 * @deprecated use the safer method {@link #GxB_SelectOp_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GxB_SelectOp_free(Pointer selectop);
	/**
	 * free a user-created select operator<br>
	 * Original signature : <code>GrB_Info GxB_SelectOp_free(GxB_SelectOp*)</code><br>
	 * @param selectop handle of select operator to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:805</i>
	 */
	int GxB_SelectOp_free(PointerByReference selectop);
	/**
	 * the binary_op type.  The binary_op's three types must all be the same.<br>
	 * create a new boolean monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_BOOL(GrB_Monoid*, const GrB_BinaryOp, const bool)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:823</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_BOOL(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte)} and {@link #GrB_Monoid_new_BOOL(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, byte)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_BOOL(Pointer monoid, Pointer op, byte identity);
	/**
	 * the binary_op type.  The binary_op's three types must all be the same.<br>
	 * create a new boolean monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_BOOL(GrB_Monoid*, const GrB_BinaryOp, const bool)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:823</i>
	 */
	int GrB_Monoid_new_BOOL(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, byte identity);
	/**
	 * the binary_op type.  The binary_op's three types must all be the same.<br>
	 * create a new boolean monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_BOOL(GrB_Monoid*, const GrB_BinaryOp, const bool)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:823</i>
	 */
	int GrB_Monoid_new_BOOL(PointerByReference monoid, Pointer op, byte identity);
	/**
	 * create a new int8 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT8(GrB_Monoid*, const GrB_BinaryOp, const int8_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:830</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_INT8(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte)} and {@link #GrB_Monoid_new_INT8(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, byte)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_INT8(Pointer monoid, Pointer op, byte identity);
	/**
	 * create a new int8 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT8(GrB_Monoid*, const GrB_BinaryOp, const int8_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:830</i>
	 */
	int GrB_Monoid_new_INT8(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, byte identity);
	/**
	 * create a new int8 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT8(GrB_Monoid*, const GrB_BinaryOp, const int8_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:830</i>
	 */
	int GrB_Monoid_new_INT8(PointerByReference monoid, Pointer op, byte identity);
	/**
	 * create a new uint8 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT8(GrB_Monoid*, const GrB_BinaryOp, const uint8_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:837</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_UINT8(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte)} and {@link #GrB_Monoid_new_UINT8(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, byte)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_UINT8(Pointer monoid, Pointer op, byte identity);
	/**
	 * create a new uint8 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT8(GrB_Monoid*, const GrB_BinaryOp, const uint8_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:837</i>
	 */
	int GrB_Monoid_new_UINT8(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, byte identity);
	/**
	 * create a new uint8 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT8(GrB_Monoid*, const GrB_BinaryOp, const uint8_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:837</i>
	 */
	int GrB_Monoid_new_UINT8(PointerByReference monoid, Pointer op, byte identity);
	/**
	 * create a new int16 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT16(GrB_Monoid*, const GrB_BinaryOp, const int16_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:844</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_INT16(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, short)} and {@link #GrB_Monoid_new_INT16(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_INT16(Pointer monoid, Pointer op, short identity);
	/**
	 * create a new int16 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT16(GrB_Monoid*, const GrB_BinaryOp, const int16_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:844</i>
	 */
	int GrB_Monoid_new_INT16(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, short identity);
	/**
	 * create a new int16 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT16(GrB_Monoid*, const GrB_BinaryOp, const int16_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:844</i>
	 */
	int GrB_Monoid_new_INT16(PointerByReference monoid, Pointer op, short identity);
	/**
	 * create a new uint16 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT16(GrB_Monoid*, const GrB_BinaryOp, const uint16_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:851</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_UINT16(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, short)} and {@link #GrB_Monoid_new_UINT16(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_UINT16(Pointer monoid, Pointer op, short identity);
	/**
	 * create a new uint16 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT16(GrB_Monoid*, const GrB_BinaryOp, const uint16_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:851</i>
	 */
	int GrB_Monoid_new_UINT16(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, short identity);
	/**
	 * create a new uint16 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT16(GrB_Monoid*, const GrB_BinaryOp, const uint16_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:851</i>
	 */
	int GrB_Monoid_new_UINT16(PointerByReference monoid, Pointer op, short identity);
	/**
	 * create a new int32 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT32(GrB_Monoid*, const GrB_BinaryOp, const int32_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:858</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_INT32(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, int)} and {@link #GrB_Monoid_new_INT32(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_INT32(Pointer monoid, Pointer op, int identity);
	/**
	 * create a new int32 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT32(GrB_Monoid*, const GrB_BinaryOp, const int32_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:858</i>
	 */
	int GrB_Monoid_new_INT32(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, int identity);
	/**
	 * create a new int32 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT32(GrB_Monoid*, const GrB_BinaryOp, const int32_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:858</i>
	 */
	int GrB_Monoid_new_INT32(PointerByReference monoid, Pointer op, int identity);
	/**
	 * create a new uint32 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT32(GrB_Monoid*, const GrB_BinaryOp, const uint32_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:865</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_UINT32(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, int)} and {@link #GrB_Monoid_new_UINT32(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_UINT32(Pointer monoid, Pointer op, int identity);
	/**
	 * create a new uint32 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT32(GrB_Monoid*, const GrB_BinaryOp, const uint32_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:865</i>
	 */
	int GrB_Monoid_new_UINT32(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, int identity);
	/**
	 * create a new uint32 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT32(GrB_Monoid*, const GrB_BinaryOp, const uint32_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:865</i>
	 */
	int GrB_Monoid_new_UINT32(PointerByReference monoid, Pointer op, int identity);
	/**
	 * create a new int64 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT64(GrB_Monoid*, const GrB_BinaryOp, const int64_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:872</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_INT64(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, long)} and {@link #GrB_Monoid_new_INT64(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_INT64(Pointer monoid, Pointer op, long identity);
	/**
	 * create a new int64 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT64(GrB_Monoid*, const GrB_BinaryOp, const int64_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:872</i>
	 */
	int GrB_Monoid_new_INT64(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, long identity);
	/**
	 * create a new int64 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_INT64(GrB_Monoid*, const GrB_BinaryOp, const int64_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:872</i>
	 */
	int GrB_Monoid_new_INT64(PointerByReference monoid, Pointer op, long identity);
	/**
	 * create a new uint64 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT64(GrB_Monoid*, const GrB_BinaryOp, const uint64_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:879</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_UINT64(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, long)} and {@link #GrB_Monoid_new_UINT64(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_UINT64(Pointer monoid, Pointer op, long identity);
	/**
	 * create a new uint64 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT64(GrB_Monoid*, const GrB_BinaryOp, const uint64_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:879</i>
	 */
	int GrB_Monoid_new_UINT64(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, long identity);
	/**
	 * create a new uint64 monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UINT64(GrB_Monoid*, const GrB_BinaryOp, const uint64_t)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:879</i>
	 */
	int GrB_Monoid_new_UINT64(PointerByReference monoid, Pointer op, long identity);
	/**
	 * create a new float monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_FP32(GrB_Monoid*, const GrB_BinaryOp, const float)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:886</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_FP32(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, float)} and {@link #GrB_Monoid_new_FP32(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, float)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_FP32(Pointer monoid, Pointer op, float identity);
	/**
	 * create a new float monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_FP32(GrB_Monoid*, const GrB_BinaryOp, const float)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:886</i>
	 */
	int GrB_Monoid_new_FP32(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, float identity);
	/**
	 * create a new float monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_FP32(GrB_Monoid*, const GrB_BinaryOp, const float)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:886</i>
	 */
	int GrB_Monoid_new_FP32(PointerByReference monoid, Pointer op, float identity);
	/**
	 * create a new double monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_FP64(GrB_Monoid*, const GrB_BinaryOp, const double)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:893</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_FP64(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, double)} and {@link #GrB_Monoid_new_FP64(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, double)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_FP64(Pointer monoid, Pointer op, double identity);
	/**
	 * create a new double monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_FP64(GrB_Monoid*, const GrB_BinaryOp, const double)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:893</i>
	 */
	int GrB_Monoid_new_FP64(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, double identity);
	/**
	 * create a new double monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_FP64(GrB_Monoid*, const GrB_BinaryOp, const double)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:893</i>
	 */
	int GrB_Monoid_new_FP64(PointerByReference monoid, Pointer op, double identity);
	/**
	 * create a monoid with a user-defined type<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UDT(GrB_Monoid*, const GrB_BinaryOp, const void*)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:900</i><br>
	 * @deprecated use the safer methods {@link #GrB_Monoid_new_UDT(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_BinaryOp, com.sun.jna.Pointer)} and {@link #GrB_Monoid_new_UDT(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Monoid_new_UDT(Pointer monoid, Pointer op, Pointer identity);
	/**
	 * create a monoid with a user-defined type<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UDT(GrB_Monoid*, const GrB_BinaryOp, const void*)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:900</i>
	 */
	int GrB_Monoid_new_UDT(PointerByReference monoid, GraphBLASLibrary.GrB_BinaryOp op, Pointer identity);
	/**
	 * create a monoid with a user-defined type<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_new_UDT(GrB_Monoid*, const GrB_BinaryOp, const void*)</code><br>
	 * @param monoid handle of monoid to create<br>
	 * @param op binary operator of the monoid<br>
	 * @param identity identity value of the monoid<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:900</i>
	 */
	int GrB_Monoid_new_UDT(PointerByReference monoid, Pointer op, Pointer identity);
	/**
	 * SPEC: GxB_Monoid_operator is an extension to the spec<br>
	 * return the monoid operator<br>
	 * Original signature : <code>GrB_Info GxB_Monoid_operator(GrB_BinaryOp*, const GrB_Monoid)</code><br>
	 * @param op returns the binary op of the monoid<br>
	 * @param monoid monoid to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:953</i><br>
	 * @deprecated use the safer methods {@link #GxB_Monoid_operator(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Monoid)} and {@link #GxB_Monoid_operator(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Monoid_operator(Pointer op, Pointer monoid);
	/**
	 * SPEC: GxB_Monoid_operator is an extension to the spec<br>
	 * return the monoid operator<br>
	 * Original signature : <code>GrB_Info GxB_Monoid_operator(GrB_BinaryOp*, const GrB_Monoid)</code><br>
	 * @param op returns the binary op of the monoid<br>
	 * @param monoid monoid to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:953</i>
	 */
	int GxB_Monoid_operator(PointerByReference op, GraphBLASLibrary.GrB_Monoid monoid);
	/**
	 * SPEC: GxB_Monoid_operator is an extension to the spec<br>
	 * return the monoid operator<br>
	 * Original signature : <code>GrB_Info GxB_Monoid_operator(GrB_BinaryOp*, const GrB_Monoid)</code><br>
	 * @param op returns the binary op of the monoid<br>
	 * @param monoid monoid to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:953</i>
	 */
	int GxB_Monoid_operator(PointerByReference op, Pointer monoid);
	/**
	 * SPEC: GxB_Monoid_identity is an extension to the spec<br>
	 * return the monoid identity<br>
	 * Original signature : <code>GrB_Info GxB_Monoid_identity(void*, const GrB_Monoid)</code><br>
	 * @param identity returns the identity of the monoid<br>
	 * @param monoid monoid to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:961</i><br>
	 * @deprecated use the safer methods {@link #GxB_Monoid_identity(com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Monoid)} and {@link #GxB_Monoid_identity(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Monoid_identity(Pointer identity, Pointer monoid);
	/**
	 * SPEC: GxB_Monoid_identity is an extension to the spec<br>
	 * return the monoid identity<br>
	 * Original signature : <code>GrB_Info GxB_Monoid_identity(void*, const GrB_Monoid)</code><br>
	 * @param identity returns the identity of the monoid<br>
	 * @param monoid monoid to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:961</i>
	 */
	int GxB_Monoid_identity(Pointer identity, GraphBLASLibrary.GrB_Monoid monoid);
	/**
	 * free a user-created monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_free(GrB_Monoid*)</code><br>
	 * @param monoid handle of monoid to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:967</i><br>
	 * @deprecated use the safer method {@link #GrB_Monoid_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GrB_Monoid_free(Pointer monoid);
	/**
	 * free a user-created monoid<br>
	 * Original signature : <code>GrB_Info GrB_Monoid_free(GrB_Monoid*)</code><br>
	 * @param monoid handle of monoid to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:967</i>
	 */
	int GrB_Monoid_free(PointerByReference monoid);
	/**
	 * create a semiring<br>
	 * Original signature : <code>GrB_Info GrB_Semiring_new(GrB_Semiring*, const GrB_Monoid, const GrB_BinaryOp)</code><br>
	 * @param semiring handle of semiring to create<br>
	 * @param add add monoid of the semiring<br>
	 * @param multiply multiply operator of the semiring<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:984</i><br>
	 * @deprecated use the safer methods {@link #GrB_Semiring_new(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Semiring_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Semiring_new(Pointer semiring, Pointer add, Pointer multiply);
	/**
	 * create a semiring<br>
	 * Original signature : <code>GrB_Info GrB_Semiring_new(GrB_Semiring*, const GrB_Monoid, const GrB_BinaryOp)</code><br>
	 * @param semiring handle of semiring to create<br>
	 * @param add add monoid of the semiring<br>
	 * @param multiply multiply operator of the semiring<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:984</i>
	 */
	int GrB_Semiring_new(PointerByReference semiring, GraphBLASLibrary.GrB_Monoid add, GraphBLASLibrary.GrB_BinaryOp multiply);
	/**
	 * create a semiring<br>
	 * Original signature : <code>GrB_Info GrB_Semiring_new(GrB_Semiring*, const GrB_Monoid, const GrB_BinaryOp)</code><br>
	 * @param semiring handle of semiring to create<br>
	 * @param add add monoid of the semiring<br>
	 * @param multiply multiply operator of the semiring<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:984</i>
	 */
	int GrB_Semiring_new(PointerByReference semiring, Pointer add, Pointer multiply);
	/**
	 * SPEC: GxB_Semiring_add is an extension to the spec<br>
	 * return the add monoid of a semiring<br>
	 * Original signature : <code>GrB_Info GxB_Semiring_add(GrB_Monoid*, const GrB_Semiring)</code><br>
	 * @param add returns add monoid of the semiring<br>
	 * @param semiring semiring to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:993</i><br>
	 * @deprecated use the safer methods {@link #GxB_Semiring_add(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Semiring)} and {@link #GxB_Semiring_add(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Semiring_add(Pointer add, Pointer semiring);
	/**
	 * SPEC: GxB_Semiring_add is an extension to the spec<br>
	 * return the add monoid of a semiring<br>
	 * Original signature : <code>GrB_Info GxB_Semiring_add(GrB_Monoid*, const GrB_Semiring)</code><br>
	 * @param add returns add monoid of the semiring<br>
	 * @param semiring semiring to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:993</i>
	 */
	int GxB_Semiring_add(PointerByReference add, GraphBLASLibrary.GrB_Semiring semiring);
	/**
	 * SPEC: GxB_Semiring_add is an extension to the spec<br>
	 * return the add monoid of a semiring<br>
	 * Original signature : <code>GrB_Info GxB_Semiring_add(GrB_Monoid*, const GrB_Semiring)</code><br>
	 * @param add returns add monoid of the semiring<br>
	 * @param semiring semiring to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:993</i>
	 */
	int GxB_Semiring_add(PointerByReference add, Pointer semiring);
	/**
	 * SPEC: GxB_Semiring_multiply is an extension to the spec<br>
	 * return multiply operator of a semiring<br>
	 * Original signature : <code>GrB_Info GxB_Semiring_multiply(GrB_BinaryOp*, const GrB_Semiring)</code><br>
	 * @param multiply returns multiply operator of the semiring<br>
	 * @param semiring semiring to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1001</i><br>
	 * @deprecated use the safer methods {@link #GxB_Semiring_multiply(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Semiring)} and {@link #GxB_Semiring_multiply(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Semiring_multiply(Pointer multiply, Pointer semiring);
	/**
	 * SPEC: GxB_Semiring_multiply is an extension to the spec<br>
	 * return multiply operator of a semiring<br>
	 * Original signature : <code>GrB_Info GxB_Semiring_multiply(GrB_BinaryOp*, const GrB_Semiring)</code><br>
	 * @param multiply returns multiply operator of the semiring<br>
	 * @param semiring semiring to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1001</i>
	 */
	int GxB_Semiring_multiply(PointerByReference multiply, GraphBLASLibrary.GrB_Semiring semiring);
	/**
	 * SPEC: GxB_Semiring_multiply is an extension to the spec<br>
	 * return multiply operator of a semiring<br>
	 * Original signature : <code>GrB_Info GxB_Semiring_multiply(GrB_BinaryOp*, const GrB_Semiring)</code><br>
	 * @param multiply returns multiply operator of the semiring<br>
	 * @param semiring semiring to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1001</i>
	 */
	int GxB_Semiring_multiply(PointerByReference multiply, Pointer semiring);
	/**
	 * free a user-created semiring<br>
	 * Original signature : <code>GrB_Info GrB_Semiring_free(GrB_Semiring*)</code><br>
	 * @param semiring handle of semiring to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1007</i><br>
	 * @deprecated use the safer method {@link #GrB_Semiring_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GrB_Semiring_free(Pointer semiring);
	/**
	 * free a user-created semiring<br>
	 * Original signature : <code>GrB_Info GrB_Semiring_free(GrB_Semiring*)</code><br>
	 * @param semiring handle of semiring to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1007</i>
	 */
	int GrB_Semiring_free(PointerByReference semiring);
	/**
	 * and type methods return basic information about a vector.<br>
	 * create a new vector with no entries<br>
	 * Original signature : <code>GrB_Info GrB_Vector_new(GrB_Vector*, const GrB_Type, const GrB_Index)</code><br>
	 * @param v handle of vector to create<br>
	 * @param type type of vector to create<br>
	 * @param n vector dimension is n-by-1<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1046</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_new(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Type, long)} and {@link #GrB_Vector_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_new(Pointer v, Pointer type, long n);
	/**
	 * and type methods return basic information about a vector.<br>
	 * create a new vector with no entries<br>
	 * Original signature : <code>GrB_Info GrB_Vector_new(GrB_Vector*, const GrB_Type, const GrB_Index)</code><br>
	 * @param v handle of vector to create<br>
	 * @param type type of vector to create<br>
	 * @param n vector dimension is n-by-1<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1046</i>
	 */
	int GrB_Vector_new(PointerByReference v, GraphBLASLibrary.GrB_Type type, long n);
	/**
	 * and type methods return basic information about a vector.<br>
	 * create a new vector with no entries<br>
	 * Original signature : <code>GrB_Info GrB_Vector_new(GrB_Vector*, const GrB_Type, const GrB_Index)</code><br>
	 * @param v handle of vector to create<br>
	 * @param type type of vector to create<br>
	 * @param n vector dimension is n-by-1<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1046</i>
	 */
	int GrB_Vector_new(PointerByReference v, Pointer type, long n);
	/**
	 * make an exact copy of a vector<br>
	 * Original signature : <code>GrB_Info GrB_Vector_dup(GrB_Vector*, const GrB_Vector)</code><br>
	 * @param w handle of output vector to create<br>
	 * @param u input vector to copy<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1053</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_dup(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_dup(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_dup(Pointer w, Pointer u);
	/**
	 * make an exact copy of a vector<br>
	 * Original signature : <code>GrB_Info GrB_Vector_dup(GrB_Vector*, const GrB_Vector)</code><br>
	 * @param w handle of output vector to create<br>
	 * @param u input vector to copy<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1053</i>
	 */
	int GrB_Vector_dup(PointerByReference w, GraphBLASLibrary.GrB_Vector u);
	/**
	 * make an exact copy of a vector<br>
	 * Original signature : <code>GrB_Info GrB_Vector_dup(GrB_Vector*, const GrB_Vector)</code><br>
	 * @param w handle of output vector to create<br>
	 * @param u input vector to copy<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1053</i>
	 */
	int GrB_Vector_dup(PointerByReference w, Pointer u);
	/**
	 * clear a vector of all entries;<br>
	 * Original signature : <code>GrB_Info GrB_Vector_clear(GrB_Vector)</code><br>
	 * @param v vector to clear<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1059</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_clear(graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_clear(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_clear(Pointer v);
	/**
	 * clear a vector of all entries;<br>
	 * Original signature : <code>GrB_Info GrB_Vector_clear(GrB_Vector)</code><br>
	 * @param v vector to clear<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1059</i>
	 */
	int GrB_Vector_clear(GraphBLASLibrary.GrB_Vector v);
	/**
	 * get the dimension of a vector<br>
	 * Original signature : <code>GrB_Info GrB_Vector_size(GrB_Index*, const GrB_Vector)</code><br>
	 * @param n vector dimension is n-by-1<br>
	 * @param v vector to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1064</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_size(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_size(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_size(LongByReference n, Pointer v);
	/**
	 * get the dimension of a vector<br>
	 * Original signature : <code>GrB_Info GrB_Vector_size(GrB_Index*, const GrB_Vector)</code><br>
	 * @param n vector dimension is n-by-1<br>
	 * @param v vector to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1064</i>
	 */
	int GrB_Vector_size(LongBuffer n, GraphBLASLibrary.GrB_Vector v);
	/**
	 * get the number of entries in a vector<br>
	 * Original signature : <code>GrB_Info GrB_Vector_nvals(GrB_Index*, const GrB_Vector)</code><br>
	 * @param nvals vector has nvals entries<br>
	 * @param v vector to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1070</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_nvals(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_nvals(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_nvals(LongByReference nvals, Pointer v);
	/**
	 * get the number of entries in a vector<br>
	 * Original signature : <code>GrB_Info GrB_Vector_nvals(GrB_Index*, const GrB_Vector)</code><br>
	 * @param nvals vector has nvals entries<br>
	 * @param v vector to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1070</i>
	 */
	int GrB_Vector_nvals(LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * SPEC: GxB_Vector_type is an extension to the spec<br>
	 * get the type of a vector<br>
	 * Original signature : <code>GrB_Info GxB_Vector_type(GrB_Type*, const GrB_Vector)</code><br>
	 * @param type returns the type of the vector<br>
	 * @param v vector to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1078</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_type(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GxB_Vector_type(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_type(Pointer type, Pointer v);
	/**
	 * SPEC: GxB_Vector_type is an extension to the spec<br>
	 * get the type of a vector<br>
	 * Original signature : <code>GrB_Info GxB_Vector_type(GrB_Type*, const GrB_Vector)</code><br>
	 * @param type returns the type of the vector<br>
	 * @param v vector to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1078</i>
	 */
	int GxB_Vector_type(PointerByReference type, GraphBLASLibrary.GrB_Vector v);
	/**
	 * SPEC: GxB_Vector_type is an extension to the spec<br>
	 * get the type of a vector<br>
	 * Original signature : <code>GrB_Info GxB_Vector_type(GrB_Type*, const GrB_Vector)</code><br>
	 * @param type returns the type of the vector<br>
	 * @param v vector to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1078</i>
	 */
	int GxB_Vector_type(PointerByReference type, Pointer v);
	/**
	 * are not guaranteed in all implementations if it is not.<br>
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_BOOL(GrB_Vector, const GrB_Index*, const bool*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1116</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_BOOL(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, byte[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_BOOL(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_BOOL(Pointer w, LongByReference I, Pointer X, long nvals, Pointer dup);
	/**
	 * are not guaranteed in all implementations if it is not.<br>
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_BOOL(GrB_Vector, const GrB_Index*, const bool*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1116</i>
	 */
	int GrB_Vector_build_BOOL(GraphBLASLibrary.GrB_Vector w, LongBuffer I, byte X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_INT8(GrB_Vector, const GrB_Index*, const int8_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1125</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_INT8(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, byte[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_INT8(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_INT8(Pointer w, LongByReference I, Pointer X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_INT8(GrB_Vector, const GrB_Index*, const int8_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1125</i>
	 */
	int GrB_Vector_build_INT8(GraphBLASLibrary.GrB_Vector w, LongBuffer I, byte X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UINT8(GrB_Vector, const GrB_Index*, const uint8_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1134</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_UINT8(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, byte[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_UINT8(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_UINT8(Pointer w, LongByReference I, Pointer X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UINT8(GrB_Vector, const GrB_Index*, const uint8_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1134</i>
	 */
	int GrB_Vector_build_UINT8(GraphBLASLibrary.GrB_Vector w, LongBuffer I, byte X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_INT16(GrB_Vector, const GrB_Index*, const int16_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1143</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_INT16(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, short[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_INT16(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_INT16(Pointer w, LongByReference I, ShortByReference X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_INT16(GrB_Vector, const GrB_Index*, const int16_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1143</i>
	 */
	int GrB_Vector_build_INT16(GraphBLASLibrary.GrB_Vector w, LongBuffer I, short X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UINT16(GrB_Vector, const GrB_Index*, const uint16_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1152</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_UINT16(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, short[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_UINT16(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_UINT16(Pointer w, LongByReference I, ShortByReference X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UINT16(GrB_Vector, const GrB_Index*, const uint16_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1152</i>
	 */
	int GrB_Vector_build_UINT16(GraphBLASLibrary.GrB_Vector w, LongBuffer I, short X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_INT32(GrB_Vector, const GrB_Index*, const int32_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1161</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_INT32(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, int[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_INT32(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_INT32(Pointer w, LongByReference I, IntByReference X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_INT32(GrB_Vector, const GrB_Index*, const int32_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1161</i>
	 */
	int GrB_Vector_build_INT32(GraphBLASLibrary.GrB_Vector w, LongBuffer I, int X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UINT32(GrB_Vector, const GrB_Index*, const uint32_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1170</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_UINT32(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, int[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_UINT32(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_UINT32(Pointer w, LongByReference I, IntByReference X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UINT32(GrB_Vector, const GrB_Index*, const uint32_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1170</i>
	 */
	int GrB_Vector_build_UINT32(GraphBLASLibrary.GrB_Vector w, LongBuffer I, int X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_INT64(GrB_Vector, const GrB_Index*, const int64_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1179</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_INT64(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, long[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_INT64(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_INT64(Pointer w, LongByReference I, LongByReference X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_INT64(GrB_Vector, const GrB_Index*, const int64_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1179</i>
	 */
	int GrB_Vector_build_INT64(GraphBLASLibrary.GrB_Vector w, LongBuffer I, long X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UINT64(GrB_Vector, const GrB_Index*, const uint64_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1188</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_UINT64(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, long[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_UINT64(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_UINT64(Pointer w, LongByReference I, LongByReference X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UINT64(GrB_Vector, const GrB_Index*, const uint64_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1188</i>
	 */
	int GrB_Vector_build_UINT64(GraphBLASLibrary.GrB_Vector w, LongBuffer I, long X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_FP32(GrB_Vector, const GrB_Index*, const float*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1197</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_FP32(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, float[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_FP32(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.FloatByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_FP32(Pointer w, LongByReference I, FloatByReference X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_FP32(GrB_Vector, const GrB_Index*, const float*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1197</i>
	 */
	int GrB_Vector_build_FP32(GraphBLASLibrary.GrB_Vector w, LongBuffer I, float X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_FP64(GrB_Vector, const GrB_Index*, const double*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1206</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_FP64(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, double[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_FP64(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.DoubleByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_FP64(Pointer w, LongByReference I, DoubleByReference X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_FP64(GrB_Vector, const GrB_Index*, const double*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1206</i>
	 */
	int GrB_Vector_build_FP64(GraphBLASLibrary.GrB_Vector w, LongBuffer I, double X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UDT(GrB_Vector, const GrB_Index*, const void*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1215</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_build_UDT(graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, com.sun.jna.Pointer, long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Vector_build_UDT(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_build_UDT(Pointer w, LongByReference I, Pointer X, long nvals, Pointer dup);
	/**
	 * build a vector from (I,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Vector_build_UDT(GrB_Vector, const GrB_Index*, const void*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param w vector to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1215</i>
	 */
	int GrB_Vector_build_UDT(GraphBLASLibrary.GrB_Vector w, LongBuffer I, Pointer X, long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * the type of w as needed.<br>
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_BOOL(GrB_Vector, const bool, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1278</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_BOOL(graphblas.GraphBLASLibrary.GrB_Vector, byte, long)} and {@link #GrB_Vector_setElement_BOOL(com.sun.jna.Pointer, byte, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_BOOL(Pointer w, byte x, long i);
	/**
	 * the type of w as needed.<br>
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_BOOL(GrB_Vector, const bool, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1278</i>
	 */
	int GrB_Vector_setElement_BOOL(GraphBLASLibrary.GrB_Vector w, byte x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_INT8(GrB_Vector, const int8_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1285</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_INT8(graphblas.GraphBLASLibrary.GrB_Vector, byte, long)} and {@link #GrB_Vector_setElement_INT8(com.sun.jna.Pointer, byte, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_INT8(Pointer w, byte x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_INT8(GrB_Vector, const int8_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1285</i>
	 */
	int GrB_Vector_setElement_INT8(GraphBLASLibrary.GrB_Vector w, byte x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UINT8(GrB_Vector, const uint8_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1292</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_UINT8(graphblas.GraphBLASLibrary.GrB_Vector, byte, long)} and {@link #GrB_Vector_setElement_UINT8(com.sun.jna.Pointer, byte, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_UINT8(Pointer w, byte x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UINT8(GrB_Vector, const uint8_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1292</i>
	 */
	int GrB_Vector_setElement_UINT8(GraphBLASLibrary.GrB_Vector w, byte x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_INT16(GrB_Vector, const int16_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1299</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_INT16(graphblas.GraphBLASLibrary.GrB_Vector, short, long)} and {@link #GrB_Vector_setElement_INT16(com.sun.jna.Pointer, short, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_INT16(Pointer w, short x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_INT16(GrB_Vector, const int16_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1299</i>
	 */
	int GrB_Vector_setElement_INT16(GraphBLASLibrary.GrB_Vector w, short x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UINT16(GrB_Vector, const uint16_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1306</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_UINT16(graphblas.GraphBLASLibrary.GrB_Vector, short, long)} and {@link #GrB_Vector_setElement_UINT16(com.sun.jna.Pointer, short, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_UINT16(Pointer w, short x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UINT16(GrB_Vector, const uint16_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1306</i>
	 */
	int GrB_Vector_setElement_UINT16(GraphBLASLibrary.GrB_Vector w, short x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_INT32(GrB_Vector, const int32_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1313</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_INT32(graphblas.GraphBLASLibrary.GrB_Vector, int, long)} and {@link #GrB_Vector_setElement_INT32(com.sun.jna.Pointer, int, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_INT32(Pointer w, int x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_INT32(GrB_Vector, const int32_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1313</i>
	 */
	int GrB_Vector_setElement_INT32(GraphBLASLibrary.GrB_Vector w, int x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UINT32(GrB_Vector, const uint32_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1320</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_UINT32(graphblas.GraphBLASLibrary.GrB_Vector, int, long)} and {@link #GrB_Vector_setElement_UINT32(com.sun.jna.Pointer, int, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_UINT32(Pointer w, int x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UINT32(GrB_Vector, const uint32_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1320</i>
	 */
	int GrB_Vector_setElement_UINT32(GraphBLASLibrary.GrB_Vector w, int x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_INT64(GrB_Vector, const int64_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1327</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_INT64(graphblas.GraphBLASLibrary.GrB_Vector, long, long)} and {@link #GrB_Vector_setElement_INT64(com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_INT64(Pointer w, long x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_INT64(GrB_Vector, const int64_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1327</i>
	 */
	int GrB_Vector_setElement_INT64(GraphBLASLibrary.GrB_Vector w, long x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UINT64(GrB_Vector, const uint64_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1334</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_UINT64(graphblas.GraphBLASLibrary.GrB_Vector, long, long)} and {@link #GrB_Vector_setElement_UINT64(com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_UINT64(Pointer w, long x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UINT64(GrB_Vector, const uint64_t, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1334</i>
	 */
	int GrB_Vector_setElement_UINT64(GraphBLASLibrary.GrB_Vector w, long x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_FP32(GrB_Vector, const float, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1341</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_FP32(graphblas.GraphBLASLibrary.GrB_Vector, float, long)} and {@link #GrB_Vector_setElement_FP32(com.sun.jna.Pointer, float, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_FP32(Pointer w, float x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_FP32(GrB_Vector, const float, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1341</i>
	 */
	int GrB_Vector_setElement_FP32(GraphBLASLibrary.GrB_Vector w, float x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_FP64(GrB_Vector, const double, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1348</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_FP64(graphblas.GraphBLASLibrary.GrB_Vector, double, long)} and {@link #GrB_Vector_setElement_FP64(com.sun.jna.Pointer, double, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_FP64(Pointer w, double x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_FP64(GrB_Vector, const double, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1348</i>
	 */
	int GrB_Vector_setElement_FP64(GraphBLASLibrary.GrB_Vector w, double x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UDT(GrB_Vector, const void*, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1355</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_setElement_UDT(graphblas.GraphBLASLibrary.GrB_Vector, com.sun.jna.Pointer, long)} and {@link #GrB_Vector_setElement_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_setElement_UDT(Pointer w, Pointer x, long i);
	/**
	 * w(i) = x<br>
	 * Original signature : <code>GrB_Info GrB_Vector_setElement_UDT(GrB_Vector, const void*, const GrB_Index)</code><br>
	 * @param w vector to modify<br>
	 * @param x scalar to assign to w(i)<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1355</i>
	 */
	int GrB_Vector_setElement_UDT(GraphBLASLibrary.GrB_Vector w, Pointer x, long i);
	/**
	 * Returns GrB_NO_VALUE if v(i) is not present, and x is unmodified.<br>
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_BOOL(bool*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1417</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_BOOL(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_BOOL(com.sun.jna.Pointer, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_BOOL(Pointer x, Pointer v, long i);
	/**
	 * Returns GrB_NO_VALUE if v(i) is not present, and x is unmodified.<br>
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_BOOL(bool*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1417</i>
	 */
	int GrB_Vector_extractElement_BOOL(ByteBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_INT8(int8_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1424</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_INT8(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_INT8(com.sun.jna.Pointer, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_INT8(Pointer x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_INT8(int8_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1424</i>
	 */
	int GrB_Vector_extractElement_INT8(ByteBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UINT8(uint8_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1431</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_UINT8(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_UINT8(com.sun.jna.Pointer, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_UINT8(Pointer x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UINT8(uint8_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1431</i>
	 */
	int GrB_Vector_extractElement_UINT8(ByteBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_INT16(int16_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1438</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_INT16(java.nio.ShortBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_INT16(com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_INT16(ShortByReference x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_INT16(int16_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1438</i>
	 */
	int GrB_Vector_extractElement_INT16(ShortBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UINT16(uint16_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1445</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_UINT16(java.nio.ShortBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_UINT16(com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_UINT16(ShortByReference x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UINT16(uint16_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1445</i>
	 */
	int GrB_Vector_extractElement_UINT16(ShortBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_INT32(int32_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1452</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_INT32(java.nio.IntBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_INT32(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_INT32(IntByReference x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_INT32(int32_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1452</i>
	 */
	int GrB_Vector_extractElement_INT32(IntBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UINT32(uint32_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1459</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_UINT32(java.nio.IntBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_UINT32(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_UINT32(IntByReference x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UINT32(uint32_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1459</i>
	 */
	int GrB_Vector_extractElement_UINT32(IntBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_INT64(int64_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1466</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_INT64(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_INT64(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_INT64(LongByReference x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_INT64(int64_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1466</i>
	 */
	int GrB_Vector_extractElement_INT64(LongBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UINT64(uint64_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1473</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_UINT64(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_UINT64(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_UINT64(LongByReference x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UINT64(uint64_t*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1473</i>
	 */
	int GrB_Vector_extractElement_UINT64(LongBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_FP32(float*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1480</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_FP32(java.nio.FloatBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_FP32(com.sun.jna.ptr.FloatByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_FP32(FloatByReference x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_FP32(float*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1480</i>
	 */
	int GrB_Vector_extractElement_FP32(FloatBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_FP64(double*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1487</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_FP64(java.nio.DoubleBuffer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_FP64(com.sun.jna.ptr.DoubleByReference, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_FP64(DoubleByReference x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_FP64(double*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1487</i>
	 */
	int GrB_Vector_extractElement_FP64(DoubleBuffer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UDT(void*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1494</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractElement_UDT(com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GrB_Vector_extractElement_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractElement_UDT(Pointer x, Pointer v, long i);
	/**
	 * x = v(i)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractElement_UDT(void*, const GrB_Vector, const GrB_Index)</code><br>
	 * @param x scalar extracted<br>
	 * @param v vector to extract an entry from<br>
	 * @param i row index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1494</i>
	 */
	int GrB_Vector_extractElement_UDT(Pointer x, GraphBLASLibrary.GrB_Vector v, long i);
	/**
	 * like [I,~,~] = find (v) in MATLAB.<br>
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_BOOL(GrB_Index*, bool*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1548</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_BOOL(java.nio.LongBuffer, java.nio.ByteBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_BOOL(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_BOOL(LongByReference I, Pointer X, LongByReference nvals, Pointer v);
	/**
	 * like [I,~,~] = find (v) in MATLAB.<br>
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_BOOL(GrB_Index*, bool*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1548</i>
	 */
	int GrB_Vector_extractTuples_BOOL(LongBuffer I, ByteBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_INT8(GrB_Index*, int8_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1556</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_INT8(java.nio.LongBuffer, java.nio.ByteBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_INT8(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_INT8(LongByReference I, Pointer X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_INT8(GrB_Index*, int8_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1556</i>
	 */
	int GrB_Vector_extractTuples_INT8(LongBuffer I, ByteBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UINT8(GrB_Index*, uint8_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1564</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_UINT8(java.nio.LongBuffer, java.nio.ByteBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_UINT8(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_UINT8(LongByReference I, Pointer X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UINT8(GrB_Index*, uint8_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1564</i>
	 */
	int GrB_Vector_extractTuples_UINT8(LongBuffer I, ByteBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_INT16(GrB_Index*, int16_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1572</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_INT16(java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_INT16(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_INT16(LongByReference I, ShortByReference X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_INT16(GrB_Index*, int16_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1572</i>
	 */
	int GrB_Vector_extractTuples_INT16(LongBuffer I, ShortBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UINT16(GrB_Index*, uint16_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1580</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_UINT16(java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_UINT16(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_UINT16(LongByReference I, ShortByReference X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UINT16(GrB_Index*, uint16_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1580</i>
	 */
	int GrB_Vector_extractTuples_UINT16(LongBuffer I, ShortBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_INT32(GrB_Index*, int32_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1588</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_INT32(java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_INT32(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_INT32(LongByReference I, IntByReference X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_INT32(GrB_Index*, int32_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1588</i>
	 */
	int GrB_Vector_extractTuples_INT32(LongBuffer I, IntBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UINT32(GrB_Index*, uint32_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1596</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_UINT32(java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_UINT32(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_UINT32(LongByReference I, IntByReference X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UINT32(GrB_Index*, uint32_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1596</i>
	 */
	int GrB_Vector_extractTuples_UINT32(LongBuffer I, IntBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_INT64(GrB_Index*, int64_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1604</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_INT64(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_INT64(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_INT64(LongByReference I, LongByReference X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_INT64(GrB_Index*, int64_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1604</i>
	 */
	int GrB_Vector_extractTuples_INT64(LongBuffer I, LongBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UINT64(GrB_Index*, uint64_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1612</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_UINT64(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_UINT64(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_UINT64(LongByReference I, LongByReference X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UINT64(GrB_Index*, uint64_t*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1612</i>
	 */
	int GrB_Vector_extractTuples_UINT64(LongBuffer I, LongBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_FP32(GrB_Index*, float*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1620</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_FP32(java.nio.LongBuffer, java.nio.FloatBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_FP32(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_FP32(LongByReference I, FloatByReference X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_FP32(GrB_Index*, float*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1620</i>
	 */
	int GrB_Vector_extractTuples_FP32(LongBuffer I, FloatBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_FP64(GrB_Index*, double*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1628</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_FP64(java.nio.LongBuffer, java.nio.DoubleBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_FP64(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_FP64(LongByReference I, DoubleByReference X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_FP64(GrB_Index*, double*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1628</i>
	 */
	int GrB_Vector_extractTuples_FP64(LongBuffer I, DoubleBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UDT(GrB_Index*, void*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1636</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extractTuples_UDT(java.nio.LongBuffer, com.sun.jna.Pointer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Vector)} and {@link #GrB_Vector_extractTuples_UDT(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extractTuples_UDT(LongByReference I, Pointer X, LongByReference nvals, Pointer v);
	/**
	 * [I,~,X] = find (v)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extractTuples_UDT(GrB_Index*, void*, GrB_Index*, const GrB_Vector)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I, X size on input; # tuples on output<br>
	 * @param v vector to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1636</i>
	 */
	int GrB_Vector_extractTuples_UDT(LongBuffer I, Pointer X, LongBuffer nvals, GraphBLASLibrary.GrB_Vector v);
	/**
	 * ------------------------------------------------------------------------------<br>
	 * free a vector<br>
	 * Original signature : <code>GrB_Info GrB_Vector_free(GrB_Vector*)</code><br>
	 * @param v handle of vector to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1682</i><br>
	 * @deprecated use the safer method {@link #GrB_Vector_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GrB_Vector_free(Pointer v);
	/**
	 * ------------------------------------------------------------------------------<br>
	 * free a vector<br>
	 * Original signature : <code>GrB_Info GrB_Vector_free(GrB_Vector*)</code><br>
	 * @param v handle of vector to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1682</i>
	 */
	int GrB_Vector_free(PointerByReference v);
	/**
	 * nvals, and type methods return basic information about a matrix.<br>
	 * create a new matrix with no entries<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_new(GrB_Matrix*, const GrB_Type, const GrB_Index, const GrB_Index)</code><br>
	 * @param A handle of matrix to create<br>
	 * @param type type of matrix to create<br>
	 * @param nrows matrix dimension is nrows-by-ncols<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1694</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_new(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Type, long, long)} and {@link #GrB_Matrix_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_new(Pointer A, Pointer type, long nrows, long ncols);
	/**
	 * nvals, and type methods return basic information about a matrix.<br>
	 * create a new matrix with no entries<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_new(GrB_Matrix*, const GrB_Type, const GrB_Index, const GrB_Index)</code><br>
	 * @param A handle of matrix to create<br>
	 * @param type type of matrix to create<br>
	 * @param nrows matrix dimension is nrows-by-ncols<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1694</i>
	 */
	int GrB_Matrix_new(GrB_Matrix_ByReference A, GraphBLASLibrary.GrB_Type type, long nrows, long ncols);
	/**
	 * nvals, and type methods return basic information about a matrix.<br>
	 * create a new matrix with no entries<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_new(GrB_Matrix*, const GrB_Type, const GrB_Index, const GrB_Index)</code><br>
	 * @param A handle of matrix to create<br>
	 * @param type type of matrix to create<br>
	 * @param nrows matrix dimension is nrows-by-ncols<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1694</i>
	 */
	int GrB_Matrix_new(PointerByReference A, Pointer type, long nrows, long ncols);
	/**
	 * make an exact copy of a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_dup(GrB_Matrix*, const GrB_Matrix)</code><br>
	 * @param C handle of output matrix to create<br>
	 * @param A input matrix to copy<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1702</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_dup(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_dup(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_dup(Pointer C, Pointer A);
	/**
	 * make an exact copy of a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_dup(GrB_Matrix*, const GrB_Matrix)</code><br>
	 * @param C handle of output matrix to create<br>
	 * @param A input matrix to copy<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1702</i>
	 */
	int GrB_Matrix_dup(PointerByReference C, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * make an exact copy of a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_dup(GrB_Matrix*, const GrB_Matrix)</code><br>
	 * @param C handle of output matrix to create<br>
	 * @param A input matrix to copy<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1702</i>
	 */
	int GrB_Matrix_dup(PointerByReference C, Pointer A);
	/**
	 * clear a matrix of all entries;<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_clear(GrB_Matrix)</code><br>
	 * @param A matrix to clear<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1708</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_clear(graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_clear(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_clear(Pointer A);
	/**
	 * clear a matrix of all entries;<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_clear(GrB_Matrix)</code><br>
	 * @param A matrix to clear<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1708</i>
	 */
	int GrB_Matrix_clear(GraphBLASLibrary.GrB_Matrix A);
	/**
	 * get the number of rows of a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_nrows(GrB_Index*, const GrB_Matrix)</code><br>
	 * @param nrows matrix has nrows rows<br>
	 * @param A matrix to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1713</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_nrows(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_nrows(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_nrows(LongByReference nrows, Pointer A);
	/**
	 * get the number of rows of a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_nrows(GrB_Index*, const GrB_Matrix)</code><br>
	 * @param nrows matrix has nrows rows<br>
	 * @param A matrix to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1713</i>
	 */
	int GrB_Matrix_nrows(LongBuffer nrows, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * get the number of columns of a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_ncols(GrB_Index*, const GrB_Matrix)</code><br>
	 * @param ncols matrix has ncols columns<br>
	 * @param A matrix to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1719</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_ncols(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_ncols(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_ncols(LongByReference ncols, Pointer A);
	/**
	 * get the number of columns of a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_ncols(GrB_Index*, const GrB_Matrix)</code><br>
	 * @param ncols matrix has ncols columns<br>
	 * @param A matrix to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1719</i>
	 */
	int GrB_Matrix_ncols(LongBuffer ncols, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * get the number of entries in a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_nvals(GrB_Index*, const GrB_Matrix)</code><br>
	 * @param nvals matrix has nvals entries<br>
	 * @param A matrix to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1725</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_nvals(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_nvals(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_nvals(LongByReference nvals, Pointer A);
	/**
	 * get the number of entries in a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_nvals(GrB_Index*, const GrB_Matrix)</code><br>
	 * @param nvals matrix has nvals entries<br>
	 * @param A matrix to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1725</i>
	 */
	int GrB_Matrix_nvals(LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * SPEC: GxB_Matrix_type is an extension to the spec<br>
	 * get the type of a matrix<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_type(GrB_Type*, const GrB_Matrix)</code><br>
	 * @param type returns the type of the matrix<br>
	 * @param A matrix to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1733</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_type(com.sun.jna.ptr.PointerByReference, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GxB_Matrix_type(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_type(Pointer type, Pointer A);
	/**
	 * SPEC: GxB_Matrix_type is an extension to the spec<br>
	 * get the type of a matrix<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_type(GrB_Type*, const GrB_Matrix)</code><br>
	 * @param type returns the type of the matrix<br>
	 * @param A matrix to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1733</i>
	 */
	int GxB_Matrix_type(PointerByReference type, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * SPEC: GxB_Matrix_type is an extension to the spec<br>
	 * get the type of a matrix<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_type(GrB_Type*, const GrB_Matrix)</code><br>
	 * @param type returns the type of the matrix<br>
	 * @param A matrix to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1733</i>
	 */
	int GxB_Matrix_type(PointerByReference type, Pointer A);
	/**
	 * details.<br>
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_BOOL(GrB_Matrix, const GrB_Index*, const GrB_Index*, const bool*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1764</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_BOOL(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, byte[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_BOOL(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_BOOL(Pointer C, LongByReference I, LongByReference J, Pointer X, long nvals, Pointer dup);
	/**
	 * details.<br>
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_BOOL(GrB_Matrix, const GrB_Index*, const GrB_Index*, const bool*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1764</i>
	 */
	int GrB_Matrix_build_BOOL(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, byte X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_INT8(GrB_Matrix, const GrB_Index*, const GrB_Index*, const int8_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1774</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_INT8(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, byte[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_INT8(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_INT8(Pointer C, LongByReference I, LongByReference J, Pointer X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_INT8(GrB_Matrix, const GrB_Index*, const GrB_Index*, const int8_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1774</i>
	 */
	int GrB_Matrix_build_INT8(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, byte X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UINT8(GrB_Matrix, const GrB_Index*, const GrB_Index*, const uint8_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1784</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_UINT8(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, byte[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_UINT8(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_UINT8(Pointer C, LongByReference I, LongByReference J, Pointer X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UINT8(GrB_Matrix, const GrB_Index*, const GrB_Index*, const uint8_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1784</i>
	 */
	int GrB_Matrix_build_UINT8(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, byte X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_INT16(GrB_Matrix, const GrB_Index*, const GrB_Index*, const int16_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1794</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_INT16(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, short[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_INT16(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_INT16(Pointer C, LongByReference I, LongByReference J, ShortByReference X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_INT16(GrB_Matrix, const GrB_Index*, const GrB_Index*, const int16_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1794</i>
	 */
	int GrB_Matrix_build_INT16(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, short X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UINT16(GrB_Matrix, const GrB_Index*, const GrB_Index*, const uint16_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1804</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_UINT16(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, short[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_UINT16(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_UINT16(Pointer C, LongByReference I, LongByReference J, ShortByReference X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UINT16(GrB_Matrix, const GrB_Index*, const GrB_Index*, const uint16_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1804</i>
	 */
	int GrB_Matrix_build_UINT16(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, short X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_INT32(GrB_Matrix, const GrB_Index*, const GrB_Index*, const int32_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1814</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_INT32(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, int[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_INT32(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_INT32(Pointer C, LongByReference I, LongByReference J, IntByReference X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_INT32(GrB_Matrix, const GrB_Index*, const GrB_Index*, const int32_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1814</i>
	 */
	int GrB_Matrix_build_INT32(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, int X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UINT32(GrB_Matrix, const GrB_Index*, const GrB_Index*, const uint32_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1824</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_UINT32(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, int[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_UINT32(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_UINT32(Pointer C, LongByReference I, LongByReference J, IntByReference X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UINT32(GrB_Matrix, const GrB_Index*, const GrB_Index*, const uint32_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1824</i>
	 */
	int GrB_Matrix_build_UINT32(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, int X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_INT64(GrB_Matrix, const GrB_Index*, const GrB_Index*, const int64_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1834</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_INT64(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, long[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_INT64(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_INT64(Pointer C, LongByReference I, LongByReference J, LongByReference X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_INT64(GrB_Matrix, const GrB_Index*, const GrB_Index*, const int64_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1834</i>
	 */
	int GrB_Matrix_build_INT64(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, long X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UINT64(GrB_Matrix, const GrB_Index*, const GrB_Index*, const uint64_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1844</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_UINT64(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, long[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_UINT64(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_UINT64(Pointer C, LongByReference I, LongByReference J, LongByReference X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UINT64(GrB_Matrix, const GrB_Index*, const GrB_Index*, const uint64_t*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1844</i>
	 */
	int GrB_Matrix_build_UINT64(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, long X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_FP32(GrB_Matrix, const GrB_Index*, const GrB_Index*, const float*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1854</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_FP32(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, float[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_FP32(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.FloatByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_FP32(Pointer C, LongByReference I, LongByReference J, FloatByReference X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_FP32(GrB_Matrix, const GrB_Index*, const GrB_Index*, const float*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1854</i>
	 */
	int GrB_Matrix_build_FP32(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, float X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_FP64(GrB_Matrix, const GrB_Index*, const GrB_Index*, const double*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1864</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_FP64(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, double[], long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_FP64(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.DoubleByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_FP64(Pointer C, LongByReference I, LongByReference J, DoubleByReference X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_FP64(GrB_Matrix, const GrB_Index*, const GrB_Index*, const double*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1864</i>
	 */
	int GrB_Matrix_build_FP64(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, double X[], long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UDT(GrB_Matrix, const GrB_Index*, const GrB_Index*, const void*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1874</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_build_UDT(graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.Pointer, long, graphblas.GraphBLASLibrary.GrB_BinaryOp)} and {@link #GrB_Matrix_build_UDT(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_build_UDT(Pointer C, LongByReference I, LongByReference J, Pointer X, long nvals, Pointer dup);
	/**
	 * build a matrix from (I,J,X) tuples<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_build_UDT(GrB_Matrix, const GrB_Index*, const GrB_Index*, const void*, const GrB_Index, const GrB_BinaryOp)</code><br>
	 * @param C matrix to build<br>
	 * @param I array of row indices of tuples<br>
	 * @param J array of column indices of tuples<br>
	 * @param X array of values of tuples<br>
	 * @param nvals number of tuples<br>
	 * @param dup binary function to assemble duplicates<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1874</i>
	 */
	int GrB_Matrix_build_UDT(GraphBLASLibrary.GrB_Matrix C, LongBuffer I, LongBuffer J, Pointer X, long nvals, GraphBLASLibrary.GrB_BinaryOp dup);
	/**
	 * from the type of x to the type of C, as needed.<br>
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_BOOL(GrB_Matrix, const bool, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1939</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_BOOL(graphblas.GraphBLASLibrary.GrB_Matrix, byte, long, long)} and {@link #GrB_Matrix_setElement_BOOL(com.sun.jna.Pointer, byte, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_BOOL(Pointer C, byte x, long i, long j);
	/**
	 * from the type of x to the type of C, as needed.<br>
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_BOOL(GrB_Matrix, const bool, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1939</i>
	 */
	int GrB_Matrix_setElement_BOOL(GraphBLASLibrary.GrB_Matrix C, boolean x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_INT8(GrB_Matrix, const int8_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1947</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_INT8(graphblas.GraphBLASLibrary.GrB_Matrix, byte, long, long)} and {@link #GrB_Matrix_setElement_INT8(com.sun.jna.Pointer, byte, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_INT8(Pointer C, byte x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_INT8(GrB_Matrix, const int8_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1947</i>
	 */
	int GrB_Matrix_setElement_INT8(GraphBLASLibrary.GrB_Matrix C, byte x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UINT8(GrB_Matrix, const uint8_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1955</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_UINT8(graphblas.GraphBLASLibrary.GrB_Matrix, byte, long, long)} and {@link #GrB_Matrix_setElement_UINT8(com.sun.jna.Pointer, byte, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_UINT8(Pointer C, byte x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UINT8(GrB_Matrix, const uint8_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1955</i>
	 */
	int GrB_Matrix_setElement_UINT8(GraphBLASLibrary.GrB_Matrix C, byte x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_INT16(GrB_Matrix, const int16_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1963</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_INT16(graphblas.GraphBLASLibrary.GrB_Matrix, short, long, long)} and {@link #GrB_Matrix_setElement_INT16(com.sun.jna.Pointer, short, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_INT16(Pointer C, short x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_INT16(GrB_Matrix, const int16_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1963</i>
	 */
	int GrB_Matrix_setElement_INT16(GraphBLASLibrary.GrB_Matrix C, short x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UINT16(GrB_Matrix, const uint16_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1971</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_UINT16(graphblas.GraphBLASLibrary.GrB_Matrix, short, long, long)} and {@link #GrB_Matrix_setElement_UINT16(com.sun.jna.Pointer, short, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_UINT16(Pointer C, short x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UINT16(GrB_Matrix, const uint16_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1971</i>
	 */
	int GrB_Matrix_setElement_UINT16(GraphBLASLibrary.GrB_Matrix C, short x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_INT32(GrB_Matrix, const int32_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1979</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_INT32(graphblas.GraphBLASLibrary.GrB_Matrix, int, long, long)} and {@link #GrB_Matrix_setElement_INT32(com.sun.jna.Pointer, int, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_INT32(Pointer C, int x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_INT32(GrB_Matrix, const int32_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1979</i>
	 */
	int GrB_Matrix_setElement_INT32(GraphBLASLibrary.GrB_Matrix C, int x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UINT32(GrB_Matrix, const uint32_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1987</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_UINT32(graphblas.GraphBLASLibrary.GrB_Matrix, int, long, long)} and {@link #GrB_Matrix_setElement_UINT32(com.sun.jna.Pointer, int, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_UINT32(Pointer C, int x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UINT32(GrB_Matrix, const uint32_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1987</i>
	 */
	int GrB_Matrix_setElement_UINT32(GraphBLASLibrary.GrB_Matrix C, int x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_INT64(GrB_Matrix, const int64_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1995</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_INT64(graphblas.GraphBLASLibrary.GrB_Matrix, long, long, long)} and {@link #GrB_Matrix_setElement_INT64(com.sun.jna.Pointer, long, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_INT64(Pointer C, long x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_INT64(GrB_Matrix, const int64_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:1995</i>
	 */
	int GrB_Matrix_setElement_INT64(GraphBLASLibrary.GrB_Matrix C, long x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UINT64(GrB_Matrix, const uint64_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2003</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_UINT64(graphblas.GraphBLASLibrary.GrB_Matrix, long, long, long)} and {@link #GrB_Matrix_setElement_UINT64(com.sun.jna.Pointer, long, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_UINT64(Pointer C, long x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UINT64(GrB_Matrix, const uint64_t, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2003</i>
	 */
	int GrB_Matrix_setElement_UINT64(GraphBLASLibrary.GrB_Matrix C, long x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_FP32(GrB_Matrix, const float, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2011</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_FP32(graphblas.GraphBLASLibrary.GrB_Matrix, float, long, long)} and {@link #GrB_Matrix_setElement_FP32(com.sun.jna.Pointer, float, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_FP32(Pointer C, float x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_FP32(GrB_Matrix, const float, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2011</i>
	 */
	int GrB_Matrix_setElement_FP32(GraphBLASLibrary.GrB_Matrix C, float x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_FP64(GrB_Matrix, const double, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2019</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_FP64(graphblas.GraphBLASLibrary.GrB_Matrix, double, long, long)} and {@link #GrB_Matrix_setElement_FP64(com.sun.jna.Pointer, double, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_FP64(Pointer C, double x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_FP64(GrB_Matrix, const double, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2019</i>
	 */
	int GrB_Matrix_setElement_FP64(GraphBLASLibrary.GrB_Matrix C, double x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UDT(GrB_Matrix, const void*, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2027</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_setElement_UDT(graphblas.GraphBLASLibrary.GrB_Matrix, com.sun.jna.Pointer, long, long)} and {@link #GrB_Matrix_setElement_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_setElement_UDT(Pointer C, Pointer x, long i, long j);
	/**
	 * C (i,j) = x<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_setElement_UDT(GrB_Matrix, const void*, const GrB_Index, const GrB_Index)</code><br>
	 * @param C matrix to modify<br>
	 * @param x scalar to assign to C(i,j)<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2027</i>
	 */
	int GrB_Matrix_setElement_UDT(GraphBLASLibrary.GrB_Matrix C, Pointer x, long i, long j);
	/**
	 * Returns GrB_NO_VALUE if A(i,j) is not present, and x is unmodified.<br>
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_BOOL(bool*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2091</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_BOOL(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_BOOL(com.sun.jna.Pointer, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_BOOL(Pointer x, Pointer A, long i, long j);
	/**
	 * Returns GrB_NO_VALUE if A(i,j) is not present, and x is unmodified.<br>
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_BOOL(bool*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2091</i>
	 */
	int GrB_Matrix_extractElement_BOOL(IntByReference x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_INT8(int8_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2099</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_INT8(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_INT8(com.sun.jna.Pointer, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_INT8(Pointer x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_INT8(int8_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2099</i>
	 */
	int GrB_Matrix_extractElement_INT8(ByteBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UINT8(uint8_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2107</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_UINT8(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_UINT8(com.sun.jna.Pointer, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_UINT8(Pointer x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UINT8(uint8_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2107</i>
	 */
	int GrB_Matrix_extractElement_UINT8(ByteBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_INT16(int16_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2115</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_INT16(java.nio.ShortBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_INT16(com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_INT16(ShortByReference x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_INT16(int16_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2115</i>
	 */
	int GrB_Matrix_extractElement_INT16(ShortBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UINT16(uint16_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2123</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_UINT16(java.nio.ShortBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_UINT16(com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_UINT16(ShortByReference x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UINT16(uint16_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2123</i>
	 */
	int GrB_Matrix_extractElement_UINT16(ShortBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_INT32(int32_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2131</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_INT32(java.nio.IntBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_INT32(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_INT32(IntByReference x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_INT32(int32_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2131</i>
	 */
	int GrB_Matrix_extractElement_INT32(IntBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UINT32(uint32_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2139</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_UINT32(java.nio.IntBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_UINT32(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_UINT32(IntByReference x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UINT32(uint32_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2139</i>
	 */
	int GrB_Matrix_extractElement_UINT32(IntBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_INT64(int64_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2147</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_INT64(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_INT64(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_INT64(LongByReference x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_INT64(int64_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2147</i>
	 */
	int GrB_Matrix_extractElement_INT64(LongBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UINT64(uint64_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2155</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_UINT64(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_UINT64(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_UINT64(LongByReference x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UINT64(uint64_t*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2155</i>
	 */
	int GrB_Matrix_extractElement_UINT64(LongBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_FP32(float*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2163</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_FP32(java.nio.FloatBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_FP32(com.sun.jna.ptr.FloatByReference, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_FP32(FloatByReference x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_FP32(float*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2163</i>
	 */
	int GrB_Matrix_extractElement_FP32(FloatBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_FP64(double*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2171</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_FP64(java.nio.DoubleBuffer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_FP64(com.sun.jna.ptr.DoubleByReference, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_FP64(DoubleByReference x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_FP64(double*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2171</i>
	 */
	int GrB_Matrix_extractElement_FP64(DoubleBuffer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UDT(void*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2179</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractElement_UDT(com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GrB_Matrix_extractElement_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractElement_UDT(Pointer x, Pointer A, long i, long j);
	/**
	 * x = A(i,j)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractElement_UDT(void*, const GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param x extracted scalar<br>
	 * @param A matrix to extract a scalar from<br>
	 * @param i row index<br>
	 * @param j column index<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2179</i>
	 */
	int GrB_Matrix_extractElement_UDT(Pointer x, GraphBLASLibrary.GrB_Matrix A, long i, long j);
	/**
	 * and X as NULL.  This is like [I,J,~] = find (A).<br>
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_BOOL(GrB_Index*, GrB_Index*, bool*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2235</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_BOOL(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ByteBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_BOOL(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_BOOL(LongByReference I, LongByReference J, Pointer X, LongByReference nvals, Pointer A);
	/**
	 * and X as NULL.  This is like [I,J,~] = find (A).<br>
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_BOOL(GrB_Index*, GrB_Index*, bool*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2235</i>
	 */
	int GrB_Matrix_extractTuples_BOOL(LongBuffer I, LongBuffer J, ByteBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_INT8(GrB_Index*, GrB_Index*, int8_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2244</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_INT8(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ByteBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_INT8(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_INT8(LongByReference I, LongByReference J, Pointer X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_INT8(GrB_Index*, GrB_Index*, int8_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2244</i>
	 */
	int GrB_Matrix_extractTuples_INT8(LongBuffer I, LongBuffer J, ByteBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UINT8(GrB_Index*, GrB_Index*, uint8_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2253</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_UINT8(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ByteBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_UINT8(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_UINT8(LongByReference I, LongByReference J, Pointer X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UINT8(GrB_Index*, GrB_Index*, uint8_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2253</i>
	 */
	int GrB_Matrix_extractTuples_UINT8(LongBuffer I, LongBuffer J, ByteBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_INT16(GrB_Index*, GrB_Index*, int16_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2262</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_INT16(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_INT16(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_INT16(LongByReference I, LongByReference J, ShortByReference X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_INT16(GrB_Index*, GrB_Index*, int16_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2262</i>
	 */
	int GrB_Matrix_extractTuples_INT16(LongBuffer I, LongBuffer J, ShortBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UINT16(GrB_Index*, GrB_Index*, uint16_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2271</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_UINT16(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_UINT16(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_UINT16(LongByReference I, LongByReference J, ShortByReference X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UINT16(GrB_Index*, GrB_Index*, uint16_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2271</i>
	 */
	int GrB_Matrix_extractTuples_UINT16(LongBuffer I, LongBuffer J, ShortBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_INT32(GrB_Index*, GrB_Index*, int32_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2280</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_INT32(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_INT32(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_INT32(LongByReference I, LongByReference J, IntByReference X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_INT32(GrB_Index*, GrB_Index*, int32_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2280</i>
	 */
	int GrB_Matrix_extractTuples_INT32(LongBuffer I, LongBuffer J, IntBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UINT32(GrB_Index*, GrB_Index*, uint32_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2289</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_UINT32(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_UINT32(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_UINT32(LongByReference I, LongByReference J, IntByReference X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UINT32(GrB_Index*, GrB_Index*, uint32_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2289</i>
	 */
	int GrB_Matrix_extractTuples_UINT32(LongBuffer I, LongBuffer J, IntBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_INT64(GrB_Index*, GrB_Index*, int64_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2298</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_INT64(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_INT64(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_INT64(LongByReference I, LongByReference J, LongByReference X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_INT64(GrB_Index*, GrB_Index*, int64_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2298</i>
	 */
	int GrB_Matrix_extractTuples_INT64(LongBuffer I, LongBuffer J, LongBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UINT64(GrB_Index*, GrB_Index*, uint64_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2307</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_UINT64(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_UINT64(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_UINT64(LongByReference I, LongByReference J, LongByReference X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UINT64(GrB_Index*, GrB_Index*, uint64_t*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2307</i>
	 */
	int GrB_Matrix_extractTuples_UINT64(LongBuffer I, LongBuffer J, LongBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_FP32(GrB_Index*, GrB_Index*, float*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2316</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_FP32(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.FloatBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_FP32(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_FP32(LongByReference I, LongByReference J, FloatByReference X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_FP32(GrB_Index*, GrB_Index*, float*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2316</i>
	 */
	int GrB_Matrix_extractTuples_FP32(LongBuffer I, LongBuffer J, FloatBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_FP64(GrB_Index*, GrB_Index*, double*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2325</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_FP64(java.nio.LongBuffer, java.nio.LongBuffer, java.nio.DoubleBuffer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_FP64(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_FP64(LongByReference I, LongByReference J, DoubleByReference X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_FP64(GrB_Index*, GrB_Index*, double*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2325</i>
	 */
	int GrB_Matrix_extractTuples_FP64(LongBuffer I, LongBuffer J, DoubleBuffer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UDT(GrB_Index*, GrB_Index*, void*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2334</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extractTuples_UDT(java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.Pointer, java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_Matrix)} and {@link #GrB_Matrix_extractTuples_UDT(com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extractTuples_UDT(LongByReference I, LongByReference J, Pointer X, LongByReference nvals, Pointer A);
	/**
	 * [I,J,X] = find (A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extractTuples_UDT(GrB_Index*, GrB_Index*, void*, GrB_Index*, const GrB_Matrix)</code><br>
	 * @param I array for returning row indices of tuples<br>
	 * @param J array for returning col indices of tuples<br>
	 * @param X array for returning values of tuples<br>
	 * @param nvals I,J,X size on input; # tuples on output<br>
	 * @param A matrix to extract tuples from<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2334</i>
	 */
	int GrB_Matrix_extractTuples_UDT(LongBuffer I, LongBuffer J, Pointer X, LongBuffer nvals, GraphBLASLibrary.GrB_Matrix A);
	/**
	 * ------------------------------------------------------------------------------<br>
	 * free a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_free(GrB_Matrix*)</code><br>
	 * @param A handle of matrix to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2382</i><br>
	 * @deprecated use the safer method {@link #GrB_Matrix_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GrB_Matrix_free(Pointer A);
	/**
	 * ------------------------------------------------------------------------------<br>
	 * free a matrix<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_free(GrB_Matrix*)</code><br>
	 * @param A handle of matrix to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2382</i>
	 */
	int GrB_Matrix_free(PointerByReference A);
	/**
	 * create a new descriptor<br>
	 * Original signature : <code>GrB_Info GrB_Descriptor_new(GrB_Descriptor*)</code><br>
	 * @param descriptor handle of descriptor to create<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2430</i><br>
	 * @deprecated use the safer method {@link #GrB_Descriptor_new(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GrB_Descriptor_new(Pointer descriptor);
	/**
	 * create a new descriptor<br>
	 * Original signature : <code>GrB_Info GrB_Descriptor_new(GrB_Descriptor*)</code><br>
	 * @param descriptor handle of descriptor to create<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2430</i>
	 */
	int GrB_Descriptor_new(PointerByReference descriptor);
	/**
	 * set a parameter in a descriptor<br>
	 * Original signature : <code>GrB_Info GrB_Descriptor_set(GrB_Descriptor, const GrB_Desc_Field, const GrB_Desc_Value)</code><br>
	 * @param desc descriptor to modify<br>
	 * @param field parameter to change<br>
	 * @param val value to change it to<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2435</i><br>
	 * @deprecated use the safer methods {@link #GrB_Descriptor_set(graphblas.GraphBLASLibrary.GrB_Descriptor, int, int)} and {@link #GrB_Descriptor_set(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int GrB_Descriptor_set(Pointer desc, int field, int val);
	/**
	 * set a parameter in a descriptor<br>
	 * Original signature : <code>GrB_Info GrB_Descriptor_set(GrB_Descriptor, const GrB_Desc_Field, const GrB_Desc_Value)</code><br>
	 * @param desc descriptor to modify<br>
	 * @param field parameter to change<br>
	 * @param val value to change it to<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2435</i>
	 */
	int GrB_Descriptor_set(GraphBLASLibrary.GrB_Descriptor desc, int field, int val);
	/**
	 * SPEC: GxB_Descriptor_get is an extension to the spec<br>
	 * get a parameter from a descriptor<br>
	 * Original signature : <code>GrB_Info GxB_Descriptor_get(GrB_Desc_Value*, const GrB_Descriptor, const GrB_Desc_Field)</code><br>
	 * @param val value of the parameter<br>
	 * @param desc descriptor to query; NULL means defaults<br>
	 * @param field parameter to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2444</i><br>
	 * @deprecated use the safer methods {@link #GxB_Descriptor_get(java.nio.IntBuffer, graphblas.GraphBLASLibrary.GrB_Descriptor, int)} and {@link #GxB_Descriptor_get(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int GxB_Descriptor_get(IntByReference val, Pointer desc, int field);
	/**
	 * SPEC: GxB_Descriptor_get is an extension to the spec<br>
	 * get a parameter from a descriptor<br>
	 * Original signature : <code>GrB_Info GxB_Descriptor_get(GrB_Desc_Value*, const GrB_Descriptor, const GrB_Desc_Field)</code><br>
	 * @param val value of the parameter<br>
	 * @param desc descriptor to query; NULL means defaults<br>
	 * @param field parameter to query<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2444</i>
	 */
	int GxB_Descriptor_get(IntBuffer val, GraphBLASLibrary.GrB_Descriptor desc, int field);
	/**
	 * free a descriptor<br>
	 * Original signature : <code>GrB_Info GrB_Descriptor_free(GrB_Descriptor*)</code><br>
	 * @param descriptor handle of descriptor to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2451</i><br>
	 * @deprecated use the safer method {@link #GrB_Descriptor_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int GrB_Descriptor_free(Pointer descriptor);
	/**
	 * free a descriptor<br>
	 * Original signature : <code>GrB_Info GrB_Descriptor_free(GrB_Descriptor*)</code><br>
	 * @param descriptor handle of descriptor to free<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2451</i>
	 */
	int GrB_Descriptor_free(PointerByReference descriptor);
	/**
	 * associative monoid.<br>
	 * C<Mask> = accum (C, A*B)<br>
	 * Original signature : <code>GrB_Info GrB_mxm(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Semiring, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param semiring defines '+' and '*' for A*B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2521</i><br>
	 * @deprecated use the safer methods {@link #GrB_mxm(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Semiring, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_mxm(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_mxm(Pointer C, Pointer Mask, Pointer accum, Pointer semiring, Pointer A, Pointer B, Pointer desc);
	/**
	 * associative monoid.<br>
	 * C<Mask> = accum (C, A*B)<br>
	 * Original signature : <code>GrB_Info GrB_mxm(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Semiring, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param semiring defines '+' and '*' for A*B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2521</i>
	 */
	int GrB_mxm(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Semiring semiring, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Matrix B, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w'<Mask> = accum (w, u'*A)<br>
	 * Original signature : <code>GrB_Info GrB_vxm(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Semiring, const GrB_Vector, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param semiring defines '+' and '*' for u'*A<br>
	 * @param u first input:  vector u<br>
	 * @param A second input: matrix A<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2532</i><br>
	 * @deprecated use the safer methods {@link #GrB_vxm(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Semiring, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_vxm(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_vxm(Pointer w, Pointer mask, Pointer accum, Pointer semiring, Pointer u, Pointer A, Pointer desc);
	/**
	 * w'<Mask> = accum (w, u'*A)<br>
	 * Original signature : <code>GrB_Info GrB_vxm(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Semiring, const GrB_Vector, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param semiring defines '+' and '*' for u'*A<br>
	 * @param u first input:  vector u<br>
	 * @param A second input: matrix A<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2532</i>
	 */
	int GrB_vxm(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Semiring semiring, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<Mask> = accum (w, A*u)<br>
	 * Original signature : <code>GrB_Info GrB_mxv(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Semiring, const GrB_Matrix, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param semiring defines '+' and '*' for A*B<br>
	 * @param A first input:  matrix A<br>
	 * @param u second input: vector u<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2543</i><br>
	 * @deprecated use the safer methods {@link #GrB_mxv(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Semiring, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_mxv(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_mxv(Pointer w, Pointer mask, Pointer accum, Pointer semiring, Pointer A, Pointer u, Pointer desc);
	/**
	 * w<Mask> = accum (w, A*u)<br>
	 * Original signature : <code>GrB_Info GrB_mxv(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Semiring, const GrB_Matrix, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param semiring defines '+' and '*' for A*B<br>
	 * @param A first input:  matrix A<br>
	 * @param u second input: vector u<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2543</i>
	 */
	int GrB_mxv(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Semiring semiring, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * operator instead. For a monoid, the mult operator is the monoid operator.<br>
	 * w<Mask> = accum (w, u.*v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Vector_Semiring(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Semiring, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param semiring defines '.*' for t=u.*v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2574</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseMult_Vector_Semiring(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Semiring, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseMult_Vector_Semiring(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseMult_Vector_Semiring(Pointer w, Pointer mask, Pointer accum, Pointer semiring, Pointer u, Pointer v, Pointer desc);
	/**
	 * operator instead. For a monoid, the mult operator is the monoid operator.<br>
	 * w<Mask> = accum (w, u.*v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Vector_Semiring(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Semiring, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param semiring defines '.*' for t=u.*v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2574</i>
	 */
	int GrB_eWiseMult_Vector_Semiring(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Semiring semiring, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Vector v, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<Mask> = accum (w, u.*v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Vector_Monoid(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param monoid defines '.*' for t=u.*v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2585</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseMult_Vector_Monoid(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseMult_Vector_Monoid(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseMult_Vector_Monoid(Pointer w, Pointer mask, Pointer accum, Pointer monoid, Pointer u, Pointer v, Pointer desc);
	/**
	 * w<Mask> = accum (w, u.*v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Vector_Monoid(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param monoid defines '.*' for t=u.*v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2585</i>
	 */
	int GrB_eWiseMult_Vector_Monoid(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Vector v, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<Mask> = accum (w, u.*v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Vector_BinaryOp(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param mult defines '.*' for t=u.*v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2596</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseMult_Vector_BinaryOp(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseMult_Vector_BinaryOp(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseMult_Vector_BinaryOp(Pointer w, Pointer mask, Pointer accum, Pointer mult, Pointer u, Pointer v, Pointer desc);
	/**
	 * w<Mask> = accum (w, u.*v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Vector_BinaryOp(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param mult defines '.*' for t=u.*v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2596</i>
	 */
	int GrB_eWiseMult_Vector_BinaryOp(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_BinaryOp mult, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Vector v, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask> = accum (C, A.*B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Matrix_Semiring(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Semiring, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param semiring defines '.*' for T=A.*B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2607</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseMult_Matrix_Semiring(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Semiring, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseMult_Matrix_Semiring(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseMult_Matrix_Semiring(Pointer C, Pointer Mask, Pointer accum, Pointer semiring, Pointer A, Pointer B, Pointer desc);
	/**
	 * C<Mask> = accum (C, A.*B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Matrix_Semiring(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Semiring, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param semiring defines '.*' for T=A.*B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2607</i>
	 */
	int GrB_eWiseMult_Matrix_Semiring(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Semiring semiring, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Matrix B, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask> = accum (C, A.*B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Matrix_Monoid(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param monoid defines '.*' for T=A.*B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2618</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseMult_Matrix_Monoid(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseMult_Matrix_Monoid(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseMult_Matrix_Monoid(Pointer C, Pointer Mask, Pointer accum, Pointer monoid, Pointer A, Pointer B, Pointer desc);
	/**
	 * C<Mask> = accum (C, A.*B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Matrix_Monoid(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param monoid defines '.*' for T=A.*B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2618</i>
	 */
	int GrB_eWiseMult_Matrix_Monoid(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Matrix B, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask> = accum (C, A.*B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Matrix_BinaryOp(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param mult defines '.*' for T=A.*B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2629</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseMult_Matrix_BinaryOp(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseMult_Matrix_BinaryOp(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseMult_Matrix_BinaryOp(Pointer C, Pointer Mask, Pointer accum, Pointer mult, Pointer A, Pointer B, Pointer desc);
	/**
	 * C<Mask> = accum (C, A.*B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseMult_Matrix_BinaryOp(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param mult defines '.*' for T=A.*B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2629</i>
	 */
	int GrB_eWiseMult_Matrix_BinaryOp(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_BinaryOp mult, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Matrix B, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * operator instead. For a monoid, the mult operator is the monoid operator.<br>
	 * w<Mask> = accum (w, u+v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Vector_Semiring(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Semiring, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param semiring defines '+' for t=u+v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2696</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseAdd_Vector_Semiring(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Semiring, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseAdd_Vector_Semiring(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseAdd_Vector_Semiring(Pointer w, Pointer mask, Pointer accum, Pointer semiring, Pointer u, Pointer v, Pointer desc);
	/**
	 * operator instead. For a monoid, the mult operator is the monoid operator.<br>
	 * w<Mask> = accum (w, u+v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Vector_Semiring(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Semiring, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param semiring defines '+' for t=u+v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2696</i>
	 */
	int GrB_eWiseAdd_Vector_Semiring(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Semiring semiring, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Vector v, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<Mask> = accum (w, u+v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Vector_Monoid(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param monoid defines '+' for t=u+v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2707</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseAdd_Vector_Monoid(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseAdd_Vector_Monoid(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseAdd_Vector_Monoid(Pointer w, Pointer mask, Pointer accum, Pointer monoid, Pointer u, Pointer v, Pointer desc);
	/**
	 * w<Mask> = accum (w, u+v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Vector_Monoid(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param monoid defines '+' for t=u+v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2707</i>
	 */
	int GrB_eWiseAdd_Vector_Monoid(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Vector v, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<Mask> = accum (w, u+v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Vector_BinaryOp(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param add defines '+' for t=u+v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2718</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseAdd_Vector_BinaryOp(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseAdd_Vector_BinaryOp(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseAdd_Vector_BinaryOp(Pointer w, Pointer mask, Pointer accum, Pointer add, Pointer u, Pointer v, Pointer desc);
	/**
	 * w<Mask> = accum (w, u+v)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Vector_BinaryOp(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Vector, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param add defines '+' for t=u+v<br>
	 * @param u first input:  vector u<br>
	 * @param v second input: vector v<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2718</i>
	 */
	int GrB_eWiseAdd_Vector_BinaryOp(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_BinaryOp add, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Vector v, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask> = accum (C, A+B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Matrix_Semiring(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Semiring, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param semiring defines '+' for T=A+B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2729</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseAdd_Matrix_Semiring(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Semiring, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseAdd_Matrix_Semiring(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseAdd_Matrix_Semiring(Pointer C, Pointer Mask, Pointer accum, Pointer semiring, Pointer A, Pointer B, Pointer desc);
	/**
	 * C<Mask> = accum (C, A+B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Matrix_Semiring(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Semiring, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param semiring defines '+' for T=A+B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2729</i>
	 */
	int GrB_eWiseAdd_Matrix_Semiring(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Semiring semiring, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Matrix B, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask> = accum (C, A+B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Matrix_Monoid(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param monoid defines '+' for T=A+B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2740</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseAdd_Matrix_Monoid(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseAdd_Matrix_Monoid(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseAdd_Matrix_Monoid(Pointer C, Pointer Mask, Pointer accum, Pointer monoid, Pointer A, Pointer B, Pointer desc);
	/**
	 * C<Mask> = accum (C, A+B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Matrix_Monoid(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param monoid defines '+' for T=A+B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2740</i>
	 */
	int GrB_eWiseAdd_Matrix_Monoid(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Matrix B, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask> = accum (C, A+B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Matrix_BinaryOp(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param add defines '+' for T=A+B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2751</i><br>
	 * @deprecated use the safer methods {@link #GrB_eWiseAdd_Matrix_BinaryOp(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_eWiseAdd_Matrix_BinaryOp(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_eWiseAdd_Matrix_BinaryOp(Pointer C, Pointer Mask, Pointer accum, Pointer add, Pointer A, Pointer B, Pointer desc);
	/**
	 * C<Mask> = accum (C, A+B)<br>
	 * Original signature : <code>GrB_Info GrB_eWiseAdd_Matrix_BinaryOp(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param add defines '+' for T=A+B<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2751</i>
	 */
	int GrB_eWiseAdd_Matrix_BinaryOp(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_BinaryOp add, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Matrix B, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask> = accum (w, u(I))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extract(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param u first input:  vector u<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2811</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_extract(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_extract(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_extract(Pointer w, Pointer mask, Pointer accum, Pointer u, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask> = accum (w, u(I))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_extract(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param u first input:  vector u<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2811</i>
	 */
	int GrB_Vector_extract(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Vector u, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask> = accum (C, A(I,J))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extract(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Matrix, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param A first input:  matrix A<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C, Mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2822</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_extract(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_extract(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_extract(Pointer C, Pointer Mask, Pointer accum, Pointer A, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask> = accum (C, A(I,J))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_extract(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Matrix, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param A first input:  matrix A<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C, Mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2822</i>
	 */
	int GrB_Matrix_extract(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Matrix A, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask> = accum (w, A(I,j))<br>
	 * Original signature : <code>GrB_Info GrB_Col_extract(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Matrix, const GrB_Index*, const GrB_Index, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output matrix for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param A first input:  matrix A<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param j column index<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2835</i><br>
	 * @deprecated use the safer methods {@link #GrB_Col_extract(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, long, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Col_extract(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Col_extract(Pointer w, Pointer mask, Pointer accum, Pointer A, LongByReference I, long ni, long j, Pointer desc);
	/**
	 * w<mask> = accum (w, A(I,j))<br>
	 * Original signature : <code>GrB_Info GrB_Col_extract(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Matrix, const GrB_Index*, const GrB_Index, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output matrix for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param A first input:  matrix A<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param j column index<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2835</i>
	 */
	int GrB_Col_extract(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Matrix A, LongBuffer I, long ni, long j, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * and in how duplicate indices are treated for scalar expansion.<br>
	 * w(I)<mask> = accum (w(I),u)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output matrix for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for z=accum(w(I),t)<br>
	 * @param u first input:  vector u<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2958</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign(Pointer w, Pointer mask, Pointer accum, Pointer u, LongByReference I, long ni, Pointer desc);
	/**
	 * and in how duplicate indices are treated for scalar expansion.<br>
	 * w(I)<mask> = accum (w(I),u)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output matrix for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for z=accum(w(I),t)<br>
	 * @param u first input:  vector u<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2958</i>
	 */
	int GxB_Vector_subassign(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Vector u, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),A)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Matrix, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),T)<br>
	 * @param A first input:  matrix A<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J), Mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2969</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign(Pointer C, Pointer Mask, Pointer accum, Pointer A, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),A)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Matrix, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),T)<br>
	 * @param A first input:  matrix A<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J), Mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2969</i>
	 */
	int GxB_Matrix_subassign(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Matrix A, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,j)<mask> = accum (C(I,j),u)<br>
	 * Original signature : <code>GrB_Info GxB_Col_subassign(GrB_Matrix, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param mask optional mask for C(I,j), unused if NULL<br>
	 * @param accum optional accum for z=accum(C(I,j),t)<br>
	 * @param u input vector<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param j column index<br>
	 * @param desc descriptor for C(I,j) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2982</i><br>
	 * @deprecated use the safer methods {@link #GxB_Col_subassign(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, long, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Col_subassign(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Col_subassign(Pointer C, Pointer mask, Pointer accum, Pointer u, LongByReference I, long ni, long j, Pointer desc);
	/**
	 * C(I,j)<mask> = accum (C(I,j),u)<br>
	 * Original signature : <code>GrB_Info GxB_Col_subassign(GrB_Matrix, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param mask optional mask for C(I,j), unused if NULL<br>
	 * @param accum optional accum for z=accum(C(I,j),t)<br>
	 * @param u input vector<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param j column index<br>
	 * @param desc descriptor for C(I,j) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2982</i>
	 */
	int GxB_Col_subassign(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Vector u, LongBuffer I, long ni, long j, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(i,J)<mask'> = accum (C(i,J),u')<br>
	 * Original signature : <code>GrB_Info GxB_Row_subassign(GrB_Matrix, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param mask optional mask for C(i,J), unused if NULL<br>
	 * @param accum optional accum for z=accum(C(i,J),t)<br>
	 * @param u input vector<br>
	 * @param i row index<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(i,J) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2994</i><br>
	 * @deprecated use the safer methods {@link #GxB_Row_subassign(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Vector, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Row_subassign(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Row_subassign(Pointer C, Pointer mask, Pointer accum, Pointer u, long i, LongByReference J, long nj, Pointer desc);
	/**
	 * C(i,J)<mask'> = accum (C(i,J),u')<br>
	 * Original signature : <code>GrB_Info GxB_Row_subassign(GrB_Matrix, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param mask optional mask for C(i,J), unused if NULL<br>
	 * @param accum optional accum for z=accum(C(i,J),t)<br>
	 * @param u input vector<br>
	 * @param i row index<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(i,J) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:2994</i>
	 */
	int GxB_Row_subassign(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Vector u, long i, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * Each of these can be used with their generic name, GxB_subassign.<br>
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_BOOL(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const bool, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3016</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_BOOL(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_BOOL(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_BOOL(Pointer w, Pointer mask, Pointer accum, byte x, LongByReference I, long ni, Pointer desc);
	/**
	 * Each of these can be used with their generic name, GxB_subassign.<br>
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_BOOL(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const bool, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3016</i>
	 */
	int GxB_Vector_subassign_BOOL(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_INT8(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int8_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3027</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_INT8(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_INT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_INT8(Pointer w, Pointer mask, Pointer accum, byte x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_INT8(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int8_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3027</i>
	 */
	int GxB_Vector_subassign_INT8(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UINT8(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint8_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3038</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_UINT8(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_UINT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_UINT8(Pointer w, Pointer mask, Pointer accum, byte x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UINT8(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint8_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3038</i>
	 */
	int GxB_Vector_subassign_UINT8(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_INT16(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int16_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3049</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_INT16(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, short, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_INT16(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_INT16(Pointer w, Pointer mask, Pointer accum, short x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_INT16(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int16_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3049</i>
	 */
	int GxB_Vector_subassign_INT16(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, short x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UINT16(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint16_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3060</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_UINT16(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, short, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_UINT16(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_UINT16(Pointer w, Pointer mask, Pointer accum, short x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UINT16(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint16_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3060</i>
	 */
	int GxB_Vector_subassign_UINT16(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, short x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_INT32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int32_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3071</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_INT32(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, int, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_INT32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_INT32(Pointer w, Pointer mask, Pointer accum, int x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_INT32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int32_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3071</i>
	 */
	int GxB_Vector_subassign_INT32(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, int x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UINT32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint32_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3082</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_UINT32(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, int, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_UINT32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_UINT32(Pointer w, Pointer mask, Pointer accum, int x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UINT32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint32_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3082</i>
	 */
	int GxB_Vector_subassign_UINT32(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, int x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_INT64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int64_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3093</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_INT64(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_INT64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_INT64(Pointer w, Pointer mask, Pointer accum, long x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_INT64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int64_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3093</i>
	 */
	int GxB_Vector_subassign_INT64(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, long x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UINT64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint64_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3104</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_UINT64(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_UINT64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_UINT64(Pointer w, Pointer mask, Pointer accum, long x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UINT64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint64_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3104</i>
	 */
	int GxB_Vector_subassign_UINT64(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, long x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_FP32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const float, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3115</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_FP32(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, float, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_FP32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, float, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_FP32(Pointer w, Pointer mask, Pointer accum, float x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_FP32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const float, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3115</i>
	 */
	int GxB_Vector_subassign_FP32(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, float x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_FP64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const double, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3126</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_FP64(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, double, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_FP64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, double, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_FP64(Pointer w, Pointer mask, Pointer accum, double x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_FP64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const double, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3126</i>
	 */
	int GxB_Vector_subassign_FP64(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, double x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UDT(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const void*, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3137</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_subassign_UDT(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, com.sun.jna.Pointer, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_subassign_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_subassign_UDT(Pointer w, Pointer mask, Pointer accum, Pointer x, LongByReference I, long ni, Pointer desc);
	/**
	 * w(I)<mask> = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GxB_Vector_subassign_UDT(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const void*, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w(I), unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w(I) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3137</i>
	 */
	int GxB_Vector_subassign_UDT(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, Pointer x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * Each of these can be used with their generic name, GxB_subassign.<br>
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_BOOL(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const bool, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3158</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_BOOL(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_BOOL(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_BOOL(Pointer C, Pointer Mask, Pointer accum, byte x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * Each of these can be used with their generic name, GxB_subassign.<br>
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_BOOL(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const bool, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3158</i>
	 */
	int GxB_Matrix_subassign_BOOL(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_INT8(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int8_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3171</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_INT8(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_INT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_INT8(Pointer C, Pointer Mask, Pointer accum, byte x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_INT8(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int8_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3171</i>
	 */
	int GxB_Matrix_subassign_INT8(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UINT8(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint8_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3184</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_UINT8(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_UINT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_UINT8(Pointer C, Pointer Mask, Pointer accum, byte x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UINT8(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint8_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3184</i>
	 */
	int GxB_Matrix_subassign_UINT8(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_INT16(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int16_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3197</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_INT16(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, short, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_INT16(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_INT16(Pointer C, Pointer Mask, Pointer accum, short x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_INT16(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int16_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3197</i>
	 */
	int GxB_Matrix_subassign_INT16(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, short x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UINT16(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint16_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3210</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_UINT16(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, short, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_UINT16(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_UINT16(Pointer C, Pointer Mask, Pointer accum, short x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UINT16(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint16_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3210</i>
	 */
	int GxB_Matrix_subassign_UINT16(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, short x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_INT32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int32_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3223</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_INT32(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, int, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_INT32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_INT32(Pointer C, Pointer Mask, Pointer accum, int x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_INT32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int32_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3223</i>
	 */
	int GxB_Matrix_subassign_INT32(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, int x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UINT32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint32_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3236</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_UINT32(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, int, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_UINT32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_UINT32(Pointer C, Pointer Mask, Pointer accum, int x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UINT32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint32_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3236</i>
	 */
	int GxB_Matrix_subassign_UINT32(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, int x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_INT64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int64_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3249</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_INT64(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, long, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_INT64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_INT64(Pointer C, Pointer Mask, Pointer accum, long x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_INT64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int64_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3249</i>
	 */
	int GxB_Matrix_subassign_INT64(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, long x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UINT64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint64_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3262</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_UINT64(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, long, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_UINT64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_UINT64(Pointer C, Pointer Mask, Pointer accum, long x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UINT64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint64_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3262</i>
	 */
	int GxB_Matrix_subassign_UINT64(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, long x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_FP32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const float, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3275</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_FP32(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, float, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_FP32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, float, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_FP32(Pointer C, Pointer Mask, Pointer accum, float x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_FP32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const float, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3275</i>
	 */
	int GxB_Matrix_subassign_FP32(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, float x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_FP64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const double, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3288</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_FP64(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, double, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_FP64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, double, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_FP64(Pointer C, Pointer Mask, Pointer accum, double x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_FP64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const double, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3288</i>
	 */
	int GxB_Matrix_subassign_FP64(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, double x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UDT(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const void*, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3301</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_subassign_UDT(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, com.sun.jna.Pointer, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_subassign_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_subassign_UDT(Pointer C, Pointer Mask, Pointer accum, Pointer x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C(I,J)<Mask> = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_subassign_UDT(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const void*, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C(I,J), unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(I,J) and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3301</i>
	 */
	int GxB_Matrix_subassign_UDT(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, Pointer x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * Each of these can be used with their generic name, GrB_assign.<br>
	 * w<mask>(I) = accum (w(I),u)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output matrix for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w(I),t)<br>
	 * @param u first input:  vector u<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3418</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign(Pointer w, Pointer mask, Pointer accum, Pointer u, LongByReference I, long ni, Pointer desc);
	/**
	 * Each of these can be used with their generic name, GrB_assign.<br>
	 * w<mask>(I) = accum (w(I),u)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output matrix for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w(I),t)<br>
	 * @param u first input:  vector u<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3418</i>
	 */
	int GrB_Vector_assign(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Vector u, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Matrix, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),T)<br>
	 * @param A first input:  matrix A<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C, Mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3429</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign(Pointer C, Pointer Mask, Pointer accum, Pointer A, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),A)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Matrix, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),T)<br>
	 * @param A first input:  matrix A<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C, Mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3429</i>
	 */
	int GrB_Matrix_assign(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Matrix A, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<mask>(I,j) = accum (C(I,j),u)<br>
	 * Original signature : <code>GrB_Info GrB_Col_assign(GrB_Matrix, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param mask optional mask for C(:,j), unused if NULL<br>
	 * @param accum optional accum for z=accum(C(I,j),t)<br>
	 * @param u input vector<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param j column index<br>
	 * @param desc descriptor for C(:,j) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3442</i><br>
	 * @deprecated use the safer methods {@link #GrB_Col_assign(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Vector, java.nio.LongBuffer, long, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Col_assign(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Col_assign(Pointer C, Pointer mask, Pointer accum, Pointer u, LongByReference I, long ni, long j, Pointer desc);
	/**
	 * C<mask>(I,j) = accum (C(I,j),u)<br>
	 * Original signature : <code>GrB_Info GrB_Col_assign(GrB_Matrix, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index*, const GrB_Index, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param mask optional mask for C(:,j), unused if NULL<br>
	 * @param accum optional accum for z=accum(C(I,j),t)<br>
	 * @param u input vector<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param j column index<br>
	 * @param desc descriptor for C(:,j) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3442</i>
	 */
	int GrB_Col_assign(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Vector u, LongBuffer I, long ni, long j, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<mask'>(i,J) = accum (C(i,J),u')<br>
	 * Original signature : <code>GrB_Info GrB_Row_assign(GrB_Matrix, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param mask optional mask for C(i,:), unused if NULL<br>
	 * @param accum optional accum for z=accum(C(i,J),t)<br>
	 * @param u input vector<br>
	 * @param i row index<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(i,:) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3454</i><br>
	 * @deprecated use the safer methods {@link #GrB_Row_assign(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Vector, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Row_assign(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Row_assign(Pointer C, Pointer mask, Pointer accum, Pointer u, long i, LongByReference J, long nj, Pointer desc);
	/**
	 * C<mask'>(i,J) = accum (C(i,J),u')<br>
	 * Original signature : <code>GrB_Info GrB_Row_assign(GrB_Matrix, const GrB_Vector, const GrB_BinaryOp, const GrB_Vector, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param mask optional mask for C(i,:), unused if NULL<br>
	 * @param accum optional accum for z=accum(C(i,J),t)<br>
	 * @param u input vector<br>
	 * @param i row index<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C(i,:) and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3454</i>
	 */
	int GrB_Row_assign(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Vector u, long i, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * Each of these can be used with their generic name, GrB_assign.<br>
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_BOOL(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const bool, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3476</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_BOOL(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_BOOL(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_BOOL(Pointer w, Pointer mask, Pointer accum, byte x, LongByReference I, long ni, Pointer desc);
	/**
	 * Each of these can be used with their generic name, GrB_assign.<br>
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_BOOL(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const bool, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3476</i>
	 */
	int GrB_Vector_assign_BOOL(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_INT8(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int8_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3487</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_INT8(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_INT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_INT8(Pointer w, Pointer mask, Pointer accum, byte x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_INT8(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int8_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3487</i>
	 */
	int GrB_Vector_assign_INT8(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UINT8(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint8_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3498</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_UINT8(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_UINT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_UINT8(Pointer w, Pointer mask, Pointer accum, byte x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UINT8(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint8_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3498</i>
	 */
	int GrB_Vector_assign_UINT8(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_INT16(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int16_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3509</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_INT16(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, short, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_INT16(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_INT16(Pointer w, Pointer mask, Pointer accum, short x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_INT16(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int16_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3509</i>
	 */
	int GrB_Vector_assign_INT16(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, short x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UINT16(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint16_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3520</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_UINT16(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, short, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_UINT16(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_UINT16(Pointer w, Pointer mask, Pointer accum, short x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UINT16(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint16_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3520</i>
	 */
	int GrB_Vector_assign_UINT16(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, short x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_INT32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int32_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3531</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_INT32(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, int, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_INT32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_INT32(Pointer w, Pointer mask, Pointer accum, int x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_INT32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int32_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3531</i>
	 */
	int GrB_Vector_assign_INT32(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, int x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UINT32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint32_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3542</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_UINT32(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, int, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_UINT32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_UINT32(Pointer w, Pointer mask, Pointer accum, int x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UINT32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint32_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3542</i>
	 */
	int GrB_Vector_assign_UINT32(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, int x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_INT64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int64_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3553</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_INT64(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_INT64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_INT64(Pointer w, Pointer mask, Pointer accum, long x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_INT64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const int64_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3553</i>
	 */
	int GrB_Vector_assign_INT64(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, long x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UINT64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint64_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3564</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_UINT64(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_UINT64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_UINT64(Pointer w, Pointer mask, Pointer accum, long x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UINT64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const uint64_t, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3564</i>
	 */
	int GrB_Vector_assign_UINT64(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, long x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_FP32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const float, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3575</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_FP32(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, float, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_FP32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, float, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_FP32(Pointer w, Pointer mask, Pointer accum, float x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_FP32(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const float, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3575</i>
	 */
	int GrB_Vector_assign_FP32(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, float x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_FP64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const double, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3586</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_FP64(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, double, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_FP64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, double, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_FP64(Pointer w, Pointer mask, Pointer accum, double x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_FP64(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const double, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3586</i>
	 */
	int GrB_Vector_assign_FP64(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, double x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UDT(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const void*, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3597</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_assign_UDT(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, com.sun.jna.Pointer, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_assign_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_assign_UDT(Pointer w, Pointer mask, Pointer accum, Pointer x, LongByReference I, long ni, Pointer desc);
	/**
	 * w<mask>(I) = accum (w(I),x)<br>
	 * Original signature : <code>GrB_Info GrB_Vector_assign_UDT(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const void*, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for Z=accum(w(I),x)<br>
	 * @param x scalar to assign to w(I)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3597</i>
	 */
	int GrB_Vector_assign_UDT(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, Pointer x, LongBuffer I, long ni, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * Each of these can be used with their generic name, GrB_assign.<br>
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_BOOL(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const bool, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3618</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_BOOL(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_BOOL(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_BOOL(Pointer C, Pointer Mask, Pointer accum, byte x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * Each of these can be used with their generic name, GrB_assign.<br>
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_BOOL(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const bool, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3618</i>
	 */
	int GrB_Matrix_assign_BOOL(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_INT8(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int8_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3631</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_INT8(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_INT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_INT8(Pointer C, Pointer Mask, Pointer accum, byte x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_INT8(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int8_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3631</i>
	 */
	int GrB_Matrix_assign_INT8(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UINT8(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint8_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3644</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_UINT8(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, byte, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_UINT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_UINT8(Pointer C, Pointer Mask, Pointer accum, byte x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UINT8(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint8_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3644</i>
	 */
	int GrB_Matrix_assign_UINT8(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, byte x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_INT16(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int16_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3657</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_INT16(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, short, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_INT16(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_INT16(Pointer C, Pointer Mask, Pointer accum, short x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_INT16(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int16_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3657</i>
	 */
	int GrB_Matrix_assign_INT16(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, short x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UINT16(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint16_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3670</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_UINT16(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, short, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_UINT16(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_UINT16(Pointer C, Pointer Mask, Pointer accum, short x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UINT16(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint16_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3670</i>
	 */
	int GrB_Matrix_assign_UINT16(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, short x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_INT32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int32_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3683</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_INT32(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, int, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_INT32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_INT32(Pointer C, Pointer Mask, Pointer accum, int x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_INT32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int32_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3683</i>
	 */
	int GrB_Matrix_assign_INT32(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, int x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UINT32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint32_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3696</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_UINT32(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, int, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_UINT32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_UINT32(Pointer C, Pointer Mask, Pointer accum, int x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UINT32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint32_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3696</i>
	 */
	int GrB_Matrix_assign_UINT32(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, int x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_INT64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int64_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3709</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_INT64(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, long, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_INT64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_INT64(Pointer C, Pointer Mask, Pointer accum, long x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_INT64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const int64_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3709</i>
	 */
	int GrB_Matrix_assign_INT64(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, long x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UINT64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint64_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3722</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_UINT64(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, long, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_UINT64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_UINT64(Pointer C, Pointer Mask, Pointer accum, long x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UINT64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const uint64_t, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3722</i>
	 */
	int GrB_Matrix_assign_UINT64(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, long x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_FP32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const float, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3735</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_FP32(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, float, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_FP32(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, float, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_FP32(Pointer C, Pointer Mask, Pointer accum, float x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_FP32(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const float, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3735</i>
	 */
	int GrB_Matrix_assign_FP32(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, float x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_FP64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const double, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3748</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_FP64(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, double, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_FP64(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, double, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_FP64(Pointer C, Pointer Mask, Pointer accum, double x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_FP64(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const double, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3748</i>
	 */
	int GrB_Matrix_assign_FP64(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, double x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UDT(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const void*, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3761</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_assign_UDT(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, com.sun.jna.Pointer, java.nio.LongBuffer, long, java.nio.LongBuffer, long, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_assign_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, long, com.sun.jna.ptr.LongByReference, long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_assign_UDT(Pointer C, Pointer Mask, Pointer accum, Pointer x, LongByReference I, long ni, LongByReference J, long nj, Pointer desc);
	/**
	 * C<Mask>(I,J) = accum (C(I,J),x)<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_assign_UDT(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const void*, const GrB_Index*, const GrB_Index, const GrB_Index*, const GrB_Index, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C(I,J),x)<br>
	 * @param x scalar to assign to C(I,J)<br>
	 * @param I row indices<br>
	 * @param ni number of row indices<br>
	 * @param J column indices<br>
	 * @param nj number of column indices<br>
	 * @param desc descriptor for C and Mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3761</i>
	 */
	int GrB_Matrix_assign_UDT(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, Pointer x, LongBuffer I, long ni, LongBuffer J, long nj, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * The input matrix A may be optionally transposed first, via the descriptor.<br>
	 * w<mask> = accum (w, op(u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_apply(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_UnaryOp, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param op operator to apply to the entries<br>
	 * @param u first input:  vector u<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3881</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_apply(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_UnaryOp, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_apply(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_apply(Pointer w, Pointer mask, Pointer accum, Pointer op, Pointer u, Pointer desc);
	/**
	 * The input matrix A may be optionally transposed first, via the descriptor.<br>
	 * w<mask> = accum (w, op(u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_apply(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_UnaryOp, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param op operator to apply to the entries<br>
	 * @param u first input:  vector u<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3881</i>
	 */
	int GrB_Vector_apply(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_UnaryOp op, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask> = accum (C, op(A)) or op(A')<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_apply(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_UnaryOp, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param op operator to apply to the entries<br>
	 * @param A first input:  matrix A<br>
	 * @param desc descriptor for C, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3891</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_apply(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_UnaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_apply(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_apply(Pointer C, Pointer Mask, Pointer accum, Pointer op, Pointer A, Pointer desc);
	/**
	 * C<Mask> = accum (C, op(A)) or op(A')<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_apply(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_UnaryOp, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param op operator to apply to the entries<br>
	 * @param A first input:  matrix A<br>
	 * @param desc descriptor for C, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3891</i>
	 */
	int GrB_Matrix_apply(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_UnaryOp op, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * The input matrix A may be optionally transposed first, via the descriptor.<br>
	 * w<mask> = accum (w, op(u,k))<br>
	 * Original signature : <code>GrB_Info GxB_Vector_select(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GxB_SelectOp, const GrB_Vector, const void*, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param op operator to apply to the entries<br>
	 * @param u first input:  vector u<br>
	 * @param k optional input for the select operator<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3930</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_select(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GxB_SelectOp, graphblas.GraphBLASLibrary.GrB_Vector, com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Vector_select(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Vector_select(Pointer w, Pointer mask, Pointer accum, Pointer op, Pointer u, Pointer k, Pointer desc);
	/**
	 * The input matrix A may be optionally transposed first, via the descriptor.<br>
	 * w<mask> = accum (w, op(u,k))<br>
	 * Original signature : <code>GrB_Info GxB_Vector_select(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GxB_SelectOp, const GrB_Vector, const void*, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param op operator to apply to the entries<br>
	 * @param u first input:  vector u<br>
	 * @param k optional input for the select operator<br>
	 * @param desc descriptor for w and mask<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3930</i>
	 */
	int GxB_Vector_select(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GxB_SelectOp op, GraphBLASLibrary.GrB_Vector u, Pointer k, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * C<Mask> = accum (C, op(A,k)) or op(A',k)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_select(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GxB_SelectOp, const GrB_Matrix, const void*, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param op operator to apply to the entries<br>
	 * @param A first input:  matrix A<br>
	 * @param k optional input for the select operator<br>
	 * @param desc descriptor for C, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3941</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_select(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GxB_SelectOp, graphblas.GraphBLASLibrary.GrB_Matrix, com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_Matrix_select(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_Matrix_select(Pointer C, Pointer Mask, Pointer accum, Pointer op, Pointer A, Pointer k, Pointer desc);
	/**
	 * C<Mask> = accum (C, op(A,k)) or op(A',k)<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_select(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GxB_SelectOp, const GrB_Matrix, const void*, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param op operator to apply to the entries<br>
	 * @param A first input:  matrix A<br>
	 * @param k optional input for the select operator<br>
	 * @param desc descriptor for C, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3941</i>
	 */
	int GxB_Matrix_select(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GxB_SelectOp op, GraphBLASLibrary.GrB_Matrix A, Pointer k, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * a row vector and sums each column.<br>
	 * w<mask> = accum (w,reduce(A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_Monoid(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param monoid reduce operator for t=reduce(A)<br>
	 * @param A first input:  matrix A<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3982</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_Monoid(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_Monoid(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_Monoid(Pointer w, Pointer mask, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * a row vector and sums each column.<br>
	 * w<mask> = accum (w,reduce(A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_Monoid(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param monoid reduce operator for t=reduce(A)<br>
	 * @param A first input:  matrix A<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3982</i>
	 */
	int GrB_Matrix_reduce_Monoid(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * w<mask> = accum (w,reduce(A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_BinaryOp(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param op reduce operator for t=reduce(A)<br>
	 * @param A first input:  matrix A<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3992</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_BinaryOp(graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_BinaryOp(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_BinaryOp(Pointer w, Pointer mask, Pointer accum, Pointer op, Pointer A, Pointer desc);
	/**
	 * w<mask> = accum (w,reduce(A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_BinaryOp(GrB_Vector, const GrB_Vector, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param w input/output vector for results<br>
	 * @param mask optional mask for w, unused if NULL<br>
	 * @param accum optional accum for z=accum(w,t)<br>
	 * @param op reduce operator for t=reduce(A)<br>
	 * @param A first input:  matrix A<br>
	 * @param desc descriptor for w, mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:3992</i>
	 */
	int GrB_Matrix_reduce_BinaryOp(GraphBLASLibrary.GrB_Vector w, GraphBLASLibrary.GrB_Vector mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_BinaryOp op, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * used in the future.<br>
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_BOOL(bool*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4020</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_BOOL(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_BOOL(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_BOOL(Pointer c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * used in the future.<br>
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_BOOL(bool*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4020</i>
	 */
	int GrB_Vector_reduce_BOOL(ByteBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_INT8(int8_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4029</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_INT8(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_INT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_INT8(Pointer c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_INT8(int8_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4029</i>
	 */
	int GrB_Vector_reduce_INT8(ByteBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UINT8(uint8_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4038</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_UINT8(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_UINT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_UINT8(Pointer c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UINT8(uint8_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4038</i>
	 */
	int GrB_Vector_reduce_UINT8(ByteBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_INT16(int16_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4047</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_INT16(java.nio.ShortBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_INT16(com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_INT16(ShortByReference c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_INT16(int16_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4047</i>
	 */
	int GrB_Vector_reduce_INT16(ShortBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UINT16(uint16_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4056</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_UINT16(java.nio.ShortBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_UINT16(com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_UINT16(ShortByReference c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UINT16(uint16_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4056</i>
	 */
	int GrB_Vector_reduce_UINT16(ShortBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_INT32(int32_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4065</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_INT32(java.nio.IntBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_INT32(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_INT32(IntByReference c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_INT32(int32_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4065</i>
	 */
	int GrB_Vector_reduce_INT32(IntBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UINT32(uint32_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4074</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_UINT32(java.nio.IntBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_UINT32(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_UINT32(IntByReference c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UINT32(uint32_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4074</i>
	 */
	int GrB_Vector_reduce_UINT32(IntBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_INT64(int64_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4083</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_INT64(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_INT64(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_INT64(LongByReference c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_INT64(int64_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4083</i>
	 */
	int GrB_Vector_reduce_INT64(LongBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UINT64(uint64_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4092</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_UINT64(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_UINT64(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_UINT64(LongByReference c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UINT64(uint64_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4092</i>
	 */
	int GrB_Vector_reduce_UINT64(LongBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_FP32(float*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4101</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_FP32(java.nio.FloatBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_FP32(com.sun.jna.ptr.FloatByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_FP32(FloatByReference c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_FP32(float*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4101</i>
	 */
	int GrB_Vector_reduce_FP32(FloatBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_FP64(double*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4110</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_FP64(java.nio.DoubleBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_FP64(com.sun.jna.ptr.DoubleByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_FP64(DoubleByReference c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_FP64(double*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4110</i>
	 */
	int GrB_Vector_reduce_FP64(DoubleBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UDT(void*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4119</i><br>
	 * @deprecated use the safer methods {@link #GrB_Vector_reduce_UDT(com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Vector, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Vector_reduce_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Vector_reduce_UDT(Pointer c, Pointer accum, Pointer monoid, Pointer u, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (u))<br>
	 * Original signature : <code>GrB_Info GrB_Vector_reduce_UDT(void*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Vector, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param u vector to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4119</i>
	 */
	int GrB_Vector_reduce_UDT(Pointer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Vector u, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * mask.<br>
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_BOOL(bool*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4142</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_BOOL(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_BOOL(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_BOOL(Pointer c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * mask.<br>
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_BOOL(bool*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4142</i>
	 */
	int GrB_Matrix_reduce_BOOL(ByteBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_INT8(int8_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4151</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_INT8(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_INT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_INT8(Pointer c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_INT8(int8_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4151</i>
	 */
	int GrB_Matrix_reduce_INT8(ByteBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UINT8(uint8_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4160</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_UINT8(java.nio.ByteBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_UINT8(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_UINT8(Pointer c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UINT8(uint8_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4160</i>
	 */
	int GrB_Matrix_reduce_UINT8(ByteBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_INT16(int16_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4169</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_INT16(java.nio.ShortBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_INT16(com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_INT16(ShortByReference c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_INT16(int16_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4169</i>
	 */
	int GrB_Matrix_reduce_INT16(ShortBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UINT16(uint16_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4178</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_UINT16(java.nio.ShortBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_UINT16(com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_UINT16(ShortByReference c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UINT16(uint16_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4178</i>
	 */
	int GrB_Matrix_reduce_UINT16(ShortBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_INT32(int32_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4187</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_INT32(java.nio.IntBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_INT32(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_INT32(IntByReference c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_INT32(int32_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4187</i>
	 */
	int GrB_Matrix_reduce_INT32(IntBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UINT32(uint32_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4196</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_UINT32(java.nio.IntBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_UINT32(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_UINT32(IntByReference c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UINT32(uint32_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4196</i>
	 */
	int GrB_Matrix_reduce_UINT32(IntBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_INT64(int64_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4205</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_INT64(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_INT64(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_INT64(LongByReference c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_INT64(int64_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4205</i>
	 */
	int GrB_Matrix_reduce_INT64(LongBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UINT64(uint64_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4214</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_UINT64(java.nio.LongBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_UINT64(com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_UINT64(LongByReference c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UINT64(uint64_t*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4214</i>
	 */
	int GrB_Matrix_reduce_UINT64(LongBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_FP32(float*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4223</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_FP32(java.nio.FloatBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_FP32(com.sun.jna.ptr.FloatByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_FP32(FloatByReference c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_FP32(float*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4223</i>
	 */
	int GrB_Matrix_reduce_FP32(FloatBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_FP64(double*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4232</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_FP64(java.nio.DoubleBuffer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_FP64(com.sun.jna.ptr.DoubleByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_FP64(DoubleByReference c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_FP64(double*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4232</i>
	 */
	int GrB_Matrix_reduce_FP64(DoubleBuffer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UDT(void*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4241</i><br>
	 * @deprecated use the safer methods {@link #GrB_Matrix_reduce_UDT(com.sun.jna.Pointer, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Monoid, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_Matrix_reduce_UDT(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_Matrix_reduce_UDT(Pointer c, Pointer accum, Pointer monoid, Pointer A, Pointer desc);
	/**
	 * c = accum (c, reduce_to_scalar (A))<br>
	 * Original signature : <code>GrB_Info GrB_Matrix_reduce_UDT(void*, const GrB_BinaryOp, const GrB_Monoid, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param c result scalar<br>
	 * @param accum optional accum for c=accum(c,t)<br>
	 * @param monoid monoid to do the reduction<br>
	 * @param A matrix to reduce<br>
	 * @param desc descriptor (currently unused)<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4241</i>
	 */
	int GrB_Matrix_reduce_UDT(Pointer c, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Monoid monoid, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * operation, C<Mask> = accum (C,A), or C<Mask> = accum (C,A') by default.<br>
	 * C<Mask> = accum (C, A')<br>
	 * Original signature : <code>GrB_Info GrB_transpose(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param A first input:  matrix A<br>
	 * @param desc descriptor for C, Mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4352</i><br>
	 * @deprecated use the safer methods {@link #GrB_transpose(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GrB_transpose(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GrB_transpose(Pointer C, Pointer Mask, Pointer accum, Pointer A, Pointer desc);
	/**
	 * operation, C<Mask> = accum (C,A), or C<Mask> = accum (C,A') by default.<br>
	 * C<Mask> = accum (C, A')<br>
	 * Original signature : <code>GrB_Info GrB_transpose(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param A first input:  matrix A<br>
	 * @param desc descriptor for C, Mask, and A<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4352</i>
	 */
	int GrB_transpose(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Descriptor desc);
	/**
	 * Original signature : <code>GrB_Info GxB_stats(GxB_Statistics*)</code><br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4790</i>
	 */
	int GxB_stats(GxB_Statistics stats);
	/**
	 * vector are deleted<br>
	 * change the size of a matrix<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_resize(GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param A matrix to modify<br>
	 * @param nrows_new new number of rows in matrix<br>
	 * @param ncols_new new number of columns in matrix<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4802</i><br>
	 * @deprecated use the safer methods {@link #GxB_Matrix_resize(graphblas.GraphBLASLibrary.GrB_Matrix, long, long)} and {@link #GxB_Matrix_resize(com.sun.jna.Pointer, long, long)} instead
	 */
	@Deprecated 
	int GxB_Matrix_resize(Pointer A, long nrows_new, long ncols_new);
	/**
	 * vector are deleted<br>
	 * change the size of a matrix<br>
	 * Original signature : <code>GrB_Info GxB_Matrix_resize(GrB_Matrix, const GrB_Index, const GrB_Index)</code><br>
	 * @param A matrix to modify<br>
	 * @param nrows_new new number of rows in matrix<br>
	 * @param ncols_new new number of columns in matrix<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4802</i>
	 */
	int GxB_Matrix_resize(GraphBLASLibrary.GrB_Matrix A, long nrows_new, long ncols_new);
	/**
	 * change the size of a vector<br>
	 * Original signature : <code>GrB_Info GxB_Vector_resize(GrB_Vector, const GrB_Index)</code><br>
	 * @param u vector to modify<br>
	 * @param nrows_new new number of rows in vector<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4809</i><br>
	 * @deprecated use the safer methods {@link #GxB_Vector_resize(graphblas.GraphBLASLibrary.GrB_Vector, long)} and {@link #GxB_Vector_resize(com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int GxB_Vector_resize(Pointer u, long nrows_new);
	/**
	 * change the size of a vector<br>
	 * Original signature : <code>GrB_Info GxB_Vector_resize(GrB_Vector, const GrB_Index)</code><br>
	 * @param u vector to modify<br>
	 * @param nrows_new new number of rows in vector<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4809</i>
	 */
	int GxB_Vector_resize(GraphBLASLibrary.GrB_Vector u, long nrows_new);
	/**
	 * ------------------------------------------------------------------------------<br>
	 * C<Mask> = accum (C, kron(A,B))<br>
	 * Original signature : <code>GrB_Info GxB_kron(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param op defines '*' for T=kron(A,B)<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4833</i><br>
	 * @deprecated use the safer methods {@link #GxB_kron(graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_BinaryOp, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Matrix, graphblas.GraphBLASLibrary.GrB_Descriptor)} and {@link #GxB_kron(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int GxB_kron(Pointer C, Pointer Mask, Pointer accum, Pointer op, Pointer A, Pointer B, Pointer desc);
	/**
	 * ------------------------------------------------------------------------------<br>
	 * C<Mask> = accum (C, kron(A,B))<br>
	 * Original signature : <code>GrB_Info GxB_kron(GrB_Matrix, const GrB_Matrix, const GrB_BinaryOp, const GrB_BinaryOp, const GrB_Matrix, const GrB_Matrix, const GrB_Descriptor)</code><br>
	 * @param C input/output matrix for results<br>
	 * @param Mask optional mask for C, unused if NULL<br>
	 * @param accum optional accum for Z=accum(C,T)<br>
	 * @param op defines '*' for T=kron(A,B)<br>
	 * @param A first input:  matrix A<br>
	 * @param B second input: matrix B<br>
	 * @param desc descriptor for C, Mask, A, and B<br>
	 * <i>native declaration : /usr/include/GraphBLAS.h:4833</i>
	 */
	int GxB_kron(GraphBLASLibrary.GrB_Matrix C, GraphBLASLibrary.GrB_Matrix Mask, GraphBLASLibrary.GrB_BinaryOp accum, GraphBLASLibrary.GrB_BinaryOp op, GraphBLASLibrary.GrB_Matrix A, GraphBLASLibrary.GrB_Matrix B, GraphBLASLibrary.GrB_Descriptor desc);
	public static class GrB_UnaryOp extends PointerType {
		public GrB_UnaryOp(Pointer address) {
			super(address);
		}
		public GrB_UnaryOp() {
			super();
		}
	};
	public static class GrB_Semiring extends PointerType {
		public GrB_Semiring(Pointer address) {
			super(address);
		}
		public GrB_Semiring() {
			super();
		}
	};
	public static class GrB_BinaryOp extends PointerType {
		public GrB_BinaryOp(Pointer address) {
			super(address);
		}
		public GrB_BinaryOp() {
			super();
		}
	};
	public static class GxB_SelectOp extends PointerType {
		public GxB_SelectOp(Pointer address) {
			super(address);
		}
		public GxB_SelectOp() {
			super();
		}
	};
	public static class GrB_Descriptor extends PointerType {
		public GrB_Descriptor(Pointer address) {
			super(address);
		}
		public GrB_Descriptor() {
			super();
		}
	};
	public static class FILE extends PointerType {
		public FILE(Pointer address) {
			super(address);
		}
		public FILE() {
			super();
		}
	};
	public static class GrB_Monoid extends PointerType {
		public GrB_Monoid(Pointer address) {
			super(address);
		}
		public GrB_Monoid() {
			super();
		}
	};
	public static class GrB_Type extends PointerType {
		public GrB_Type(Pointer address) {
			super(address);
		}
		public GrB_Type() {
			super();
		}
	};
	public static class GrB_Matrix extends PointerType {
		public GrB_Matrix(Pointer address) {
			super(address);
		}
		public GrB_Matrix() {
			super();
		}
	};

	class GrB_Matrix_ByReference extends ByReference {

		public GrB_Matrix_ByReference() {
			super(Native.POINTER_SIZE);
		}

		public void setValue(GrB_Matrix value) {
			getPointer().setPointer(0, value.getPointer());
		}

		public GrB_Matrix getValue() {
			return new GrB_Matrix(getPointer().getPointer(0));
		}
	}

	public static class GrB_Vector extends PointerType {
		public GrB_Vector(Pointer address) {
			super(address);
		}
		public GrB_Vector() {
			super();
		}
	};
}
